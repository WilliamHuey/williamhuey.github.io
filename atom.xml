<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Home Page</title>
    <link rel="self" type="application/atom+xml" href="https://williamhuey.github.io/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://williamhuey.github.io"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2025-09-01T00:00:00+00:00</updated>
    <id>https://williamhuey.github.io/atom.xml</id>
    <entry xml:lang="en">
        <title>Uv and Pip</title>
        <published>2025-09-01T00:00:00+00:00</published>
        <updated>2025-09-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/uv-and-pip/"/>
        <id>https://williamhuey.github.io/posts/uv-and-pip/</id>
        
        <summary type="html">&lt;h3 id=&quot;using-pip-in-the-uv-venv&quot;&gt;Using Pip in the UV Venv&lt;&#x2F;h3&gt;
&lt;p&gt;By default, uv does not provide pip in the uv venv environment.
https:&#x2F;&#x2F;github.com&#x2F;astral-sh&#x2F;uv&#x2F;issues&#x2F;12604&lt;&#x2F;p&gt;
&lt;p&gt;This might cause unintended consequences when you accidentally use
&lt;code&gt;pip install&lt;&#x2F;code&gt; instead of uv pip install.&lt;&#x2F;p&gt;
&lt;p&gt;To avoid this issue, you need to use the &lt;code&gt;--seed&lt;&#x2F;code&gt; option
when creating the initial uv venv environment.
Then activate the venv before performing running any pip commands.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Incus - Linux Containers</title>
        <published>2025-08-02T00:00:00+00:00</published>
        <updated>2025-08-02T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/incus-linux-containers/"/>
        <id>https://williamhuey.github.io/posts/incus-linux-containers/</id>
        
        <summary type="html">&lt;h3 id=&quot;alternative-to-distrobox&quot;&gt;Alternative to Distrobox&lt;&#x2F;h3&gt;
&lt;p&gt;The desire for isolated and on-demand development environments can be met with
Distrobox, however it isn&#x27;t well suited for development in terms of flexibility.&lt;&#x2F;p&gt;
&lt;p&gt;One shortcoming with that &lt;a href=&quot;https:&#x2F;&#x2F;williamhuey.github.io&#x2F;posts&#x2F;incus-linux-containers&#x2F;github.com&#x2F;89luca89&#x2F;distrobox&quot;&gt;Distrobox&lt;&#x2F;a&gt; is that it doesn&#x27;t offer the option to specify the location drive for containers. This option is handled by the container software that is used with Distrobox. While docker
does offer a way to specify a way to use containers in another drive, Distrobox didn&#x27;t quite work well with docker when the storage location of containers was changed in the docker from my experience.&lt;&#x2F;p&gt;
&lt;p&gt;Since Distrobox is wrapping the functionality of either docker or Podman, which means that it lives with the limitations of docker or Podman. There is also the great likelihood that some features can&#x27;t be mapped perfectly.&lt;&#x2F;p&gt;
&lt;p&gt;To address this issue, one would want to use a more full-fledge solution such as &lt;a href=&quot;https:&#x2F;&#x2F;linuxcontainers.org&#x2F;incus&#x2F;&quot;&gt;Incus&lt;&#x2F;a&gt;.
With Incus, you no longer have to install a container application such as Podman or docker with Distrobox for environment isolation.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Pyside - Draggable Collapsible Panels</title>
        <published>2025-07-01T00:00:00+00:00</published>
        <updated>2025-07-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/pyside-draggable-collapsible-panels/"/>
        <id>https://williamhuey.github.io/posts/pyside-draggable-collapsible-panels/</id>
        
        <summary type="html">&lt;h3 id=&quot;reorder-containers-that-can-expand-and-collapse&quot;&gt;Reorder Containers that can Expand and Collapse&lt;&#x2F;h3&gt;
&lt;p&gt;To further expand upon prior discussion of collapsible panels from previous posts&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;williamhuey.github.io&#x2F;posts&#x2F;superqt-distributing-qcollapsible-containers&#x2F;&quot;&gt;Superqt - Distributing QCollapsible Containers&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;williamhuey.github.io&#x2F;posts&#x2F;pyqt-collapsible-sections&#x2F;&quot;&gt;PyQT - Collapsible Sections&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In the previous article, the panels were referred to as containers, but in this
article they will be referred to as panels instead. The term container might be confused with the element that houses all the panels.&lt;&#x2F;p&gt;
&lt;p&gt;We will want to improve our panels beyond being only collapsible by adding
draggable&#x2F;sortable capabilities.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;demo-of-behavior&quot;&gt;Demo of Behavior&lt;&#x2F;h3&gt;
&lt;video controls=&quot;&quot; name=&quot;media&quot;&gt;
    &lt;source src=&quot;&#x2F;images&#x2F;posts&#x2F;draggable-and-collapsible-panels.webm&quot; alt=&quot;pyside draggable collapsible containers&quot;&gt;
&lt;&#x2F;video&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Pyside - Vertical Tabset with QSplitter</title>
        <published>2025-06-01T00:00:00+00:00</published>
        <updated>2025-06-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/pyside-vertical-tabset-with-qsplitter/"/>
        <id>https://williamhuey.github.io/posts/pyside-vertical-tabset-with-qsplitter/</id>
        
        <summary type="html">&lt;h3 id=&quot;icon-sidebar-as-tabs&quot;&gt;Icon Sidebar as Tabs&lt;&#x2F;h3&gt;
&lt;p&gt;A common UI paradigm for grouping access of different functionalities to
different portions of a GUI application is use a tabset with tabs that are
situated in either the left or vertical portion of the screen.&lt;&#x2F;p&gt;
&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;pyside-vertical-tabset-with-qsplitter.png&quot; alt=&quot;pyside vertical tabset with qsplitter&quot;&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Mise - Package Manager</title>
        <published>2025-05-01T00:00:00+00:00</published>
        <updated>2025-05-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/mise-package-installer/"/>
        <id>https://williamhuey.github.io/posts/mise-package-installer/</id>
        
        <summary type="html">&lt;h3 id=&quot;choices-and-versatility&quot;&gt;Choices and Versatility&lt;&#x2F;h3&gt;
&lt;p&gt;Asdf is a tools and program installer that has been around for some time, but
there is a newer tool that grants you the powers of asdf with even more capabilities such as automatic dependency management, larger choice
of programs with support from different source registries and temporary
dependency switching which comes from mise.&lt;&#x2F;p&gt;
&lt;p&gt;These aren&#x27;t the only functionality of mise, but they are
a few that can make an impact on improving your dependency management workflow.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;automatic-dependency-change-upon-project-folder-navigation&quot;&gt;Automatic Dependency Change Upon Project Folder Navigation&lt;&#x2F;h4&gt;
&lt;p&gt;Mise simplifies the way you manage your runtime or programming language versions when you need to switch to different project folders that require a certain version.&lt;&#x2F;p&gt;
&lt;p&gt;Supposedly that you are interested in install different versions of nodejs, one LTS and the other more newer non-LTS version.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;mise&lt;&#x2F;span&gt;&lt;span&gt; install node@22.12.0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;mise&lt;&#x2F;span&gt;&lt;span&gt; install node@23.11.0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Set the version of nodejs that is to be the global default. This should
generally be a LTS version of nodejs.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;mise&lt;&#x2F;span&gt;&lt;span&gt; use&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt; --global&lt;&#x2F;span&gt;&lt;span&gt; node@22.12.0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>R Markdown - Quick Tips #1</title>
        <published>2025-04-01T00:00:00+00:00</published>
        <updated>2025-04-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/r-markdown-quick-tips-1/"/>
        <id>https://williamhuey.github.io/posts/r-markdown-quick-tips-1/</id>
        
        <summary type="html">&lt;h3 id=&quot;code-block-advice&quot;&gt;Code Block Advice&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;use-the-cache-true-option&quot;&gt;Use the &lt;code&gt;cache=TRUE&lt;&#x2F;code&gt; option&lt;&#x2F;h4&gt;
&lt;p&gt;To speed up the compilation time when you write R graphing code, you will have to use the caching option.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;```{r cache=TRUE}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Vitest - Optional Pass in Timeout</title>
        <published>2025-03-01T00:00:00+00:00</published>
        <updated>2025-03-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/vitest-optional-pass-in-timeout/"/>
        <id>https://williamhuey.github.io/posts/vitest-optional-pass-in-timeout/</id>
        
        <summary type="html">&lt;h3 id=&quot;custom-timeout&quot;&gt;Custom Timeout&lt;&#x2F;h3&gt;
&lt;p&gt;In the situation where your tests might actually run slower on another person&#x27;s machine, you should give them an option to increase the timeout to
prevent timeout failures.&lt;&#x2F;p&gt;
&lt;p&gt;At first glance, you might do something like this to run the command to accept
a timeout value.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;npm&lt;&#x2F;span&gt;&lt;span&gt; run test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt; --&lt;&#x2F;span&gt;&lt;span&gt; --testTimeout=50000
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Vitest - Testing Observables</title>
        <published>2025-02-01T00:00:00+00:00</published>
        <updated>2025-02-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/vitest-testing-observables/"/>
        <id>https://williamhuey.github.io/posts/vitest-testing-observables/</id>
        
        <summary type="html">&lt;h3 id=&quot;read-observables-values-correctly&quot;&gt;Read Observables Values Correctly&lt;&#x2F;h3&gt;
&lt;p&gt;As the JavaScript world have adopted promises to handle asynchronous events, it would be no surprise that Vitest would also support promises.&lt;&#x2F;p&gt;
&lt;p&gt;Stepping away for Vitest for a moment, the general method of testing RxJS observables was through marble diagram testing such as using &lt;a href=&quot;https:&#x2F;&#x2F;rxjs.dev&#x2F;guide&#x2F;testing&#x2F;marble-testing&quot;&gt;TestScheduler&lt;&#x2F;a&gt;, but the TestScheduler is more suited for testing the order of emitted values from observables.&lt;&#x2F;p&gt;
&lt;p&gt;If your observable only emits one final value, it is more suitable to convert the observable to a promise and check the return value in Vitest as shown below&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;{ lastValueFrom } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;#39;rxjs&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6773;&quot;&gt;&#x2F;&#x2F; Depending on your application, you might need to switch
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6773;&quot;&gt;&#x2F;&#x2F; out lastValueFrom with firstValueFrom for the conversion to work.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;promiseResults &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;lastValueFrom&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;returnsObservable&lt;&#x2F;span&gt;&lt;span&gt;())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(result)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;toBe&lt;&#x2F;span&gt;&lt;span&gt;(valueExpected)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Visual Studio Code Extensions - Variable-print Plugin</title>
        <published>2025-01-01T00:00:00+00:00</published>
        <updated>2025-01-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/visual-studio-code-extension-variable-print-plugin/"/>
        <id>https://williamhuey.github.io/posts/visual-studio-code-extension-variable-print-plugin/</id>
        
        <summary type="html">&lt;h3 id=&quot;one-plugin-for-multiple-programming-languages&quot;&gt;One Plugin for Multiple Programming Languages&lt;&#x2F;h3&gt;
&lt;p&gt;To quickly look at the output of a variable, you can use the print or console statement in your programming language of choice. Most of the language packages you add with the vscode extensions do not have a shortcut hotkey combination to quickly print or log out a variable. A good majority of the extensions also
caters to the more common programming languages such as JavaScript or Python.&lt;&#x2F;p&gt;
&lt;p&gt;It would be most beneficial to have a general logger where you can activate the statement with a use of a shortcut key combination if you tend to work with multiple languages. There are a couple of general print loggers on the vscode extension marketplace, but the &lt;a href=&quot;https:&#x2F;&#x2F;marketplace.visualstudio.com&#x2F;items?itemName=nicheface.variable-print&quot;&gt;variable-print&lt;&#x2F;a&gt; plugin stood out in that it was the one that offered the option of adding new languages to support custom print statements.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Quarto - Matplotlib Charts</title>
        <published>2024-12-01T00:00:00+00:00</published>
        <updated>2024-12-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/quarto-matplotlib-charts/"/>
        <id>https://williamhuey.github.io/posts/quarto-matplotlib-charts/</id>
        
        <summary type="html">&lt;h3 id=&quot;hide-code-description-display-and-chart-and-render-svg-charts-instead&quot;&gt;Hide Code Description Display and Chart and Render Svg Charts Instead&lt;&#x2F;h3&gt;
&lt;p&gt;The Matplotlib charting outputs unwanted content in your document related to the description of chart. Something similar to this might appear right above the chart that you want to display.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;&amp;lt;Figure size 960x576 with 0 Axes&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Quarto - Revealjs</title>
        <published>2024-11-07T00:00:00+00:00</published>
        <updated>2024-11-07T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/quarto-revealjs/"/>
        <id>https://williamhuey.github.io/posts/quarto-revealjs/</id>
        
        <summary type="html">&lt;h3 id=&quot;presentations-in-quarto&quot;&gt;Presentations in Quarto&lt;&#x2F;h3&gt;
&lt;p&gt;Not only is quarto good for document publishing needs, it can also be used as presentation tool. With quarto, you can leverage revealjs to display your charts and graphs.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;columns&quot;&gt;Columns&lt;&#x2F;h4&gt;
&lt;p&gt;There might be a situation where you would want to present your graphs in two columns.
This makes better use of the space in one slide to accommodate two figures.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#0f1419;color:#bfbab0;&quot;&gt;&lt;code&gt;&lt;span&gt;:::: {.columns}
&lt;&#x2F;span&gt;&lt;span&gt;:::: {.column}
&lt;&#x2F;span&gt;&lt;span&gt;First column
&lt;&#x2F;span&gt;&lt;span&gt;::::
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;:::: {.column}
&lt;&#x2F;span&gt;&lt;span&gt;Second Column
&lt;&#x2F;span&gt;&lt;span&gt;::::
&lt;&#x2F;span&gt;&lt;span&gt;::::
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Quarto - SVG Charts</title>
        <published>2024-10-03T00:00:00+00:00</published>
        <updated>2024-10-03T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/quarto-svg-charts/"/>
        <id>https://williamhuey.github.io/posts/quarto-svg-charts/</id>
        
        <summary type="html">&lt;h3 id=&quot;render-ggplot-in-r-as-svg-images&quot;&gt;Render GGplot in R as SVG Images&lt;&#x2F;h3&gt;
&lt;p&gt;When you enlarge the view of a qqplot chart, you would like to see a crisp zoomed in version of the chart. We will achieve this by using svg charts.&lt;&#x2F;p&gt;
&lt;p&gt;For one to use svg charts in ggplot, it requires a download of another package called &#x27;svglite&#x27;. However, R dependency manager doesn&#x27;t quite install sub-dependencies for you, which makes it challenging to get all the dependencies you need for a project. To alleviate this issue, install renv to make managing R dependencies a less complicated ordeal.&lt;&#x2F;p&gt;
&lt;p&gt;The following example assumes that you are on an Ubuntu machine.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Quarto in Docker Container</title>
        <published>2024-09-07T00:00:00+00:00</published>
        <updated>2024-09-07T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/quarto-in-docker-container/"/>
        <id>https://williamhuey.github.io/posts/quarto-in-docker-container/</id>
        
        <summary type="html">&lt;h3 id=&quot;reproducible-quarto-environment&quot;&gt;Reproducible Quarto Environment&lt;&#x2F;h3&gt;
&lt;p&gt;Quarto a tool to help with technical and scientific publishing which incorporates programming languages and typesetting support in all-in-one solution. Since quarto relies on python and many other dependencies, it is safer to run Quarto in a docker container to avoid significant changes on your host machine. In addition, it will help with a repeat set up when you need to bring up the same environment again.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Astrowind - Image Component</title>
        <published>2024-08-10T00:00:00+00:00</published>
        <updated>2024-08-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/astrowind-image-component/"/>
        <id>https://williamhuey.github.io/posts/astrowind-image-component/</id>
        
        <summary type="html">&lt;h3 id=&quot;searching-for-images&quot;&gt;Searching for Images&lt;&#x2F;h3&gt;
&lt;p&gt;Astro comes with a default image component that you can use to
load your images from the &#x2F;src&#x2F;assets folder.&lt;&#x2F;p&gt;
&lt;p&gt;From the actual &lt;a href=&quot;https:&#x2F;&#x2F;docs.astro.build&#x2F;en&#x2F;reference&#x2F;api-reference&#x2F;#image-&quot;&gt;documentation page&lt;&#x2F;a&gt;,&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;markdown&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-markdown &quot;&gt;&lt;code class=&quot;language-markdown&quot; data-lang=&quot;markdown&quot;&gt;&lt;span style=&quot;background-color:#bfbab010;font-weight:bold;color:#5c6773;&quot;&gt;---
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; import the Image component and the image
&lt;&#x2F;span&gt;&lt;span&gt;import { Image } from &amp;#39;astro:assets&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;import myImage from &amp;quot;..&#x2F;assets&#x2F;my_image.png&amp;quot;; &#x2F;&#x2F; Image is 1600x900
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#ff7733;&quot;&gt;---
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6773;&quot;&gt;&amp;lt;!-- `alt` is mandatory on the Image component --&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#39bae690;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#59c2ff;&quot;&gt;Image &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;{myImage} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;alt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;A description of my image.&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#39bae690;&quot;&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Using Astro&#x27;s &lt;code&gt;Image&lt;&#x2F;code&gt; component is useful in that it helps you perform optimizations to your images on the final build. It is able to output to webp format as well as set the width and height for them to improve site layout performance.&lt;&#x2F;p&gt;
&lt;p&gt;However, one of the downside of using the default component is that you have to load the images one by one. Astro also has a suggestion for &lt;a href=&quot;https:&#x2F;&#x2F;docs.astro.build&#x2F;en&#x2F;recipes&#x2F;dynamically-importing-images&#x2F;&quot;&gt;dynamic images&lt;&#x2F;a&gt; using &lt;code&gt;import.meta.glob&lt;&#x2F;code&gt;, but it still is not as dynamic as compared to that of Astro&#x27;s &lt;code&gt;glob&lt;&#x2F;code&gt; method.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Astro Theme - Astrowind Styles Organization</title>
        <published>2024-07-20T00:00:00+00:00</published>
        <updated>2024-07-20T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/astrowind-theme-styles-organization/"/>
        <id>https://williamhuey.github.io/posts/astrowind-theme-styles-organization/</id>
        
        <summary type="html">&lt;h3 id=&quot;moving-css-variables-into-tailwind-css&quot;&gt;Moving Css Variables into tailwind.css&lt;&#x2F;h3&gt;
&lt;p&gt;The original &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;onwidget&#x2F;astrowind&quot;&gt;Astrowind theme&lt;&#x2F;a&gt; has a &lt;code&gt;CustomStyles.astro&lt;&#x2F;code&gt; file that stores color variables and font asset resources, but this theme also uses tailwind.
To make the shared content more localized, the css variables should be stored
in the &lt;code&gt;tailwind.css&lt;&#x2F;code&gt; file because then the color variables will then be usable in the &lt;code&gt;tailwind.config.cjs&lt;&#x2F;code&gt; file.&lt;&#x2F;p&gt;
&lt;p&gt;Intuitively, the initial thought would be to also store the font assets in the tailwind.css, but the fonts used are downloaded with &lt;a href=&quot;https:&#x2F;&#x2F;fontsource.org&#x2F;&quot;&gt;fontsource&lt;&#x2F;a&gt;, which uses the &lt;code&gt;import&lt;&#x2F;code&gt; to load the fonts in a JavaScript file. This means that the fonts are better suited to be imported into
the &lt;code&gt;CustomStyles.astro&lt;&#x2F;code&gt; file because astro files can handle JavaScript.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Visual Studio Code Authoring Extension - Highlighted Text to File</title>
        <published>2024-06-19T00:00:00+00:00</published>
        <updated>2024-06-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/vscode-extension-write-to-file/"/>
        <id>https://williamhuey.github.io/posts/vscode-extension-write-to-file/</id>
        
        <summary type="html">&lt;h3 id=&quot;write-selected-text-to-the-contents-of-a-file&quot;&gt;Write Selected Text to the Contents of a File&lt;&#x2F;h3&gt;
&lt;p&gt;A common operation that a vscode extension might encounter is the need to write to an external file. The following example will show how this is performed using
the &lt;code&gt;vscode.workspace.fs.writeFile&lt;&#x2F;code&gt; method.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Batch XCF to Jpg Conversion</title>
        <published>2024-05-24T00:00:00+00:00</published>
        <updated>2024-05-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/batch-convert-xcf-to-jpg/"/>
        <id>https://williamhuey.github.io/posts/batch-convert-xcf-to-jpg/</id>
        
        <summary type="html">&lt;h3 id=&quot;gimp-s-default-editing-format-to-jpg&quot;&gt;Gimp&#x27;s Default Editing Format to JPG&lt;&#x2F;h3&gt;
&lt;p&gt;When saving multiple edited images into Gimp&#x27;s native image editing format,
there will be a need to export them to a readily used format such as JPG. By using the bash script written by &lt;a href=&quot;https:&#x2F;&#x2F;billauer.co.il&#x2F;blog&#x2F;2009&#x2F;07&#x2F;gimp-xcf-jpg-jpeg-convert-bash-script&#x2F;&quot;&gt;Eli&lt;&#x2F;a&gt; you can achieve this task.&lt;&#x2F;p&gt;
&lt;p&gt;However, his bash script requires you to place that file into the same directory
as to where the xcf files are located for conversion, which can be improved
if you wish to operate on multiple folders with xcf, it would be
inconvenient to copy the script to all those folders.&lt;&#x2F;p&gt;
&lt;p&gt;Modifying the script, we have the following file, &quot;convert_xcf_to_jpg.sh&quot;, which can take an input and output directories to control where the conversion will take place without the restriction of leaving the script in the same directory as the xcf files.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Typst - Reusability</title>
        <published>2024-04-20T00:00:00+00:00</published>
        <updated>2024-04-20T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/typst-reusability/"/>
        <id>https://williamhuey.github.io/posts/typst-reusability/</id>
        
        <summary type="html">&lt;h3 id=&quot;sharing-string-contents&quot;&gt;Sharing String Contents&lt;&#x2F;h3&gt;
&lt;p&gt;Typst offers the capability of content reuse by allowing for file
imports. It makes extensive use of functions to perform special
manipulation of text.&lt;&#x2F;p&gt;
&lt;h5 id=&quot;shared-function-load-function-from-file&quot;&gt;Shared Function - Load Function from File&lt;&#x2F;h5&gt;
&lt;p&gt;Reusable content can be defined in another file within a function.
This function when called will yield the shared content.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;&#x2F;&#x2F; shared-function.typ
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#let content() = {
&lt;&#x2F;span&gt;&lt;span&gt;[ 
&lt;&#x2F;span&gt;&lt;span&gt;  = Content from another file
&lt;&#x2F;span&gt;&lt;span&gt; Shared appears here.
&lt;&#x2F;span&gt;&lt;span&gt; ]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;sample.typ&lt;&#x2F;code&gt; will load the content from &lt;code&gt;shared-function.typ&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;&#x2F;&#x2F; sample.typ
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#import(&amp;quot;shared-function.typ&amp;quot;): *
&lt;&#x2F;span&gt;&lt;span&gt;#content()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Tsx - Use TypeScript in NPM Scripts</title>
        <published>2024-03-11T00:00:00+00:00</published>
        <updated>2024-03-11T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/tsx-use-typescript-in-npm-scripts/"/>
        <id>https://williamhuey.github.io/posts/tsx-use-typescript-in-npm-scripts/</id>
        
        <summary type="html">&lt;h3 id=&quot;execute-esm-script-on-nodejs-command-line-without-compilation&quot;&gt;Execute ESM script on Nodejs Command Line without Compilation&lt;&#x2F;h3&gt;
&lt;p&gt;When executing NPM scripts you can use node to run JavaScript files.&lt;&#x2F;p&gt;
&lt;p&gt;If you want step up the type safety of your JavaScript you would switch to using TypeScript, but then you then need something to help compile your
TypeScript on demand such as &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;TypeStrong&#x2F;ts-node&quot;&gt;ts-node&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Typst - LaTeX Alternative</title>
        <published>2024-02-21T00:00:00+00:00</published>
        <updated>2024-02-21T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/typst-latex-alternative/"/>
        <id>https://williamhuey.github.io/posts/typst-latex-alternative/</id>
        
        <summary type="html">&lt;h3 id=&quot;typesetting-documents-with-rust&quot;&gt;Typesetting Documents with Rust&lt;&#x2F;h3&gt;
&lt;p&gt;LaTeX is a time-honored typesetting application that has developed a large
community. With age, comes accumulation of the wealth of packages for general document creation. Although it is tool that is well-developed, it tends to be slower and
is burden with a legacy design that is not as performant as newer tools.
Since its use is so pervasive, it has become entrenched in the document
creation community preventing new competing application has come forth. However, there is an alternative that is worth considering and that one is Typst.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Oclif and Vite</title>
        <published>2024-01-14T00:00:00+00:00</published>
        <updated>2024-01-14T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/oclif-and-vite/"/>
        <id>https://williamhuey.github.io/posts/oclif-and-vite/</id>
        
        <summary type="html">&lt;h3 id=&quot;incompatibility-with-cli-build&quot;&gt;Incompatibility with CLI Build&lt;&#x2F;h3&gt;
&lt;p&gt;If you intend to build out an Oclif typescript CLI app that is to be consumed by Vitejs, you might experience an issue with integrating the two. The Oclif CLI builds properly, but when executing the CLI through vite, this errors comes up.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;[ERR_UNKNOWN_FILE_EXTENSION]&lt;&#x2F;span&gt;&lt;span&gt; TypeError Plugin: ... &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;ERR_UNKNOWN_FILE_EXTENSION&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;: Unknown file extension &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;.ts&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Superqt - Distributing QCollapsible Containers</title>
        <published>2023-12-21T00:00:00+00:00</published>
        <updated>2023-12-21T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/superqt-distributing-qcollapsible-containers/"/>
        <id>https://williamhuey.github.io/posts/superqt-distributing-qcollapsible-containers/</id>
        
        <summary type="html">&lt;h3 id=&quot;spacing-display-issues&quot;&gt;Spacing Display Issues&lt;&#x2F;h3&gt;
&lt;p&gt;By itself, the QCollapsible element placed in a QVBoxLayout or QHBoxLayout
will not offer an out-of-the-box solution for a refined display of distributing containers or the containers contents predictably.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Oclif v3 - Module Load Error</title>
        <published>2023-11-05T00:00:00+00:00</published>
        <updated>2023-11-05T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/oclif-typescript-import-module-aliases/"/>
        <id>https://williamhuey.github.io/posts/oclif-typescript-import-module-aliases/</id>
        
        <summary type="html">&lt;h3 id=&quot;typescript-import-aliases&quot;&gt;Typescript Import Aliases&lt;&#x2F;h3&gt;
&lt;p&gt;To simplify the referencing of module import paths, one can configure the &lt;code&gt;ts.config.json&lt;&#x2F;code&gt; like so.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;compilerOptions&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff3333;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;paths&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;@src&#x2F;*&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;src&#x2F;*&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      ]
&lt;&#x2F;span&gt;&lt;span&gt;    }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;rootDir&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;src&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;baseUrl&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;.&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;include&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;src&#x2F;**&#x2F;*&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  ]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>PyQT - Collapsible Sections</title>
        <published>2023-10-15T00:00:00+00:00</published>
        <updated>2023-10-15T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/pyqt-collapsible-sections/"/>
        <id>https://williamhuey.github.io/posts/pyqt-collapsible-sections/</id>
        
        <summary type="html">&lt;h3 id=&quot;pyqt-accordion-equivalent&quot;&gt;PyQt - Accordion Equivalent&lt;&#x2F;h3&gt;
&lt;p&gt;When there are groups of related information that are to be made available for viewing, but is too visually cluttering when shown all at once, one can use the grouping behavior of an accordion or collapsible section to selectively show
information.&lt;&#x2F;p&gt;
&lt;p&gt;One native Qt widget that can be used in PyQT is the &lt;a href=&quot;https:&#x2F;&#x2F;doc.qt.io&#x2F;qtforpython-6&#x2F;PySide6&#x2F;QtWidgets&#x2F;QToolBox.html#qtoolbox&quot;&gt;QtToolBox&lt;&#x2F;a&gt;.
This widget offers a vertical list of collapsible containers where
only one can be viewed at a time. It behaves similar to a tab view except the the tab and its associated content are bunched together.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Dev Tools - Searching Elements in the DOM Elements Tab</title>
        <published>2023-09-09T00:00:00+00:00</published>
        <updated>2023-09-09T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/devtools-searching-for-elements-in-dom-elements-tab/"/>
        <id>https://williamhuey.github.io/posts/devtools-searching-for-elements-in-dom-elements-tab/</id>
        
        <summary type="html">&lt;h3 id=&quot;jump-to-specific-elements-in-the-dom-viewer&quot;&gt;Jump to Specific Elements in the Dom Viewer&lt;&#x2F;h3&gt;
&lt;p&gt;Within the &quot;Inspector&quot; or &quot;Elements&quot; (depending on if you are using Firefox or Chrome) Html node viewer tab&#x27;s input search field, you can use a xpath selector to select a group of elements with the following.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&#x2F;&#x2F;element-type
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will search for all &lt;code&gt;a&lt;&#x2F;code&gt; tags.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&#x2F;&#x2F;a
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>PyQtgraph - Graphing with a Ui File</title>
        <published>2023-08-12T00:00:00+00:00</published>
        <updated>2023-08-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/pyqtgraph-graphing-with-a-ui-file/"/>
        <id>https://williamhuey.github.io/posts/pyqtgraph-graphing-with-a-ui-file/</id>
        
        <summary type="html">&lt;h3 id=&quot;pyqtgraph-graph-in-native-window&quot;&gt;PyQtgraph Graph in Native Window&lt;&#x2F;h3&gt;
&lt;p&gt;Dedicating a UI file to store the application layout will make for a more organized process when working with PyQt. The Python code will be cleaner if it focuses on creating the dynamic data that will be inserted into the ui file.&lt;&#x2F;p&gt;
&lt;p&gt;To demonstrate this, create a &lt;code&gt;window.ui&lt;&#x2F;code&gt; file.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span style=&quot;color:#39bae690;&quot;&gt;&amp;lt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#59c2ff;&quot;&gt;xml &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;1.0&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;encoding&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;UTF-8&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#39bae690;&quot;&gt;?&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#39bae690;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#59c2ff;&quot;&gt;ui &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;4.0&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#39bae690;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#39bae690;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#59c2ff;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#39bae690;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;MainWindow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#39bae690;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#59c2ff;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#39bae690;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#39bae690;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#59c2ff;&quot;&gt;widget &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;QMainWindow&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;MainWindow&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#39bae690;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#39bae690;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#59c2ff;&quot;&gt;property &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;windowTitle&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#39bae690;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#39bae690;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#59c2ff;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#39bae690;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;MainWindow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#39bae690;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#59c2ff;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#39bae690;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#39bae690;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#59c2ff;&quot;&gt;property&lt;&#x2F;span&gt;&lt;span style=&quot;color:#39bae690;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#39bae690;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#59c2ff;&quot;&gt;widget &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;QWidget&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;centralwidget&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#39bae690;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#39bae690;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#59c2ff;&quot;&gt;layout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;QVBoxLayout&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;verticalLayout&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#39bae690;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#39bae690;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#59c2ff;&quot;&gt;layout&lt;&#x2F;span&gt;&lt;span style=&quot;color:#39bae690;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#39bae690;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#59c2ff;&quot;&gt;widget&lt;&#x2F;span&gt;&lt;span style=&quot;color:#39bae690;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#39bae690;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#59c2ff;&quot;&gt;widget&lt;&#x2F;span&gt;&lt;span style=&quot;color:#39bae690;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#39bae690;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#59c2ff;&quot;&gt;ui&lt;&#x2F;span&gt;&lt;span style=&quot;color:#39bae690;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>fzf - Integrate with Jq for JSON Search</title>
        <published>2023-07-16T00:00:00+00:00</published>
        <updated>2023-07-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/fzf-integrate-jq/"/>
        <id>https://williamhuey.github.io/posts/fzf-integrate-jq/</id>
        
        <summary type="html">&lt;h3 id=&quot;fzf-search-json-data&quot;&gt;Fzf Search JSON Data&lt;&#x2F;h3&gt;
&lt;p&gt;JSON is a ubiquitous data format and searching for content in JSON will come up often enough to warrant a real-time search functionality. &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jqlang&#x2F;jq&quot;&gt;jq&lt;&#x2F;a&gt; can be used to query json and fzf can be combined with this tool to fulfill our JSON search capabilities.&lt;&#x2F;p&gt;
&lt;p&gt;Start fzf with jq&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;#39;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;fzf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt; --preview &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;jq {q} &amp;lt; us-data.json.json&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>DITA - Structured Documentation with XML</title>
        <published>2023-06-11T00:00:00+00:00</published>
        <updated>2023-06-11T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/dita-structured-documentation-with-xml/"/>
        <id>https://williamhuey.github.io/posts/dita-structured-documentation-with-xml/</id>
        
        <summary type="html">&lt;h3 id=&quot;dita-setup&quot;&gt;DITA Setup&lt;&#x2F;h3&gt;
&lt;p&gt;DITA stands for Darwin Information Typing Architecture, it is an XML specification that prescribes tags for organizing your documentation content.
For Dita to be able to generate a well-defined structure, it suggests a rather prescriptive methods of tag use. The intention of Dita is to promote content reuse so that your documentation project will be more manageable as it scales up in size and complexity.&lt;&#x2F;p&gt;
&lt;p&gt;Getting started with Dita begins with having these prerequisites.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Java&lt;&#x2F;li&gt;
&lt;li&gt;Text editor&lt;&#x2F;li&gt;
&lt;li&gt;DITA-OT&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Nuitka and PyQtgraph - Bundle a Python Application into a Standalone Binary</title>
        <published>2023-05-01T00:00:00+00:00</published>
        <updated>2023-05-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/nuitka-pyqtgraph-bundle-standalone-executable/"/>
        <id>https://williamhuey.github.io/posts/nuitka-pyqtgraph-bundle-standalone-executable/</id>
        
        <summary type="html">&lt;h3 id=&quot;pyqtgraph-standalone-application&quot;&gt;PyQtgraph Standalone Application&lt;&#x2F;h3&gt;
&lt;p&gt;Nuitka is a Python compiler that supports the conversion of a Python application to compiled code. It enables you to create a single file executable for convenient distribution.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;&#x2F;h4&gt;
&lt;p&gt;You will need a C compiler and a Python version specified in the Nuitka &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Nuitka&#x2F;Nuitka#requirements&quot;&gt;README.md&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;installing-nuitka&quot;&gt;Installing Nuitka&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;python3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt; -m&lt;&#x2F;span&gt;&lt;span&gt; pip install nuitka
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Creating an AppImage from a Binary Executable</title>
        <published>2023-04-07T00:00:00+00:00</published>
        <updated>2023-04-07T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/creating-an-appimage-for-binary-application/"/>
        <id>https://williamhuey.github.io/posts/creating-an-appimage-for-binary-application/</id>
        
        <summary type="html">&lt;h3 id=&quot;make-a-portable-desktop-application-without-the-need-for-installation&quot;&gt;Make a Portable Desktop Application without the need for Installation&lt;&#x2F;h3&gt;
&lt;p&gt;To create a binary which can be run on many Linux machines, an &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;AppImage&quot;&gt;AppImage&lt;&#x2F;a&gt; can be generated. An AppImage wraps around the files needed to run the application and when executed, doesn&#x27;t require modifications to your operating system as it is self-contained.&lt;&#x2F;p&gt;
&lt;p&gt;Download the appimage tool executable file from
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;AppImage&#x2F;AppImageKit&#x2F;releases&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Dearpygui - Menu Bar</title>
        <published>2023-03-25T00:00:00+00:00</published>
        <updated>2023-03-25T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/dearpygui-menu-bar/"/>
        <id>https://williamhuey.github.io/posts/dearpygui-menu-bar/</id>
        
        <summary type="html">&lt;p&gt;With dearpygui, there are two ways to create a menu bar that displays within your main application window. One method of creating a menu bar is to use the &quot;Viewport Menu Bar&quot; which is the traditional menu bar with the fixed horizontal row of menu entries found near the top of your main applications window and the other is the &quot;Menu Bar&quot; which is a floating menu window inside your main application window.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Word Proximity Search</title>
        <published>2023-02-04T00:00:00+00:00</published>
        <updated>2023-02-04T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/word-proximity-search/"/>
        <id>https://williamhuey.github.io/posts/word-proximity-search/</id>
        
        <summary type="html">&lt;p&gt;When you search for related words in a general area that are not in strict sequential order, you will have to resort to use a regex pattern that search across multiple words at a time.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;firstword someword anotherword someotherword secondword&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#95e6cb;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#95e6cb;&quot;&gt;(?:firstword(?:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;\W&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;\w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#95e6cb;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;{1,3}?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;\W&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#95e6cb;&quot;&gt;secondword)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#95e6cb;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6773;&quot;&gt;&#x2F;&#x2F; Returns
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6773;&quot;&gt;&#x2F;&#x2F; [&amp;quot;firstword someword anotherword someotherword secondword&amp;quot;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>fzf - Find CLI Application and Execute</title>
        <published>2023-01-01T00:00:00+00:00</published>
        <updated>2023-01-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/fzf-find-application-and-execute/"/>
        <id>https://williamhuey.github.io/posts/fzf-find-application-and-execute/</id>
        
        <summary type="html">&lt;h3 id=&quot;run-the-application-when-found&quot;&gt;Run the Application when Found&lt;&#x2F;h3&gt;
&lt;p&gt;When you have an application you wish to search for that you know starts with a certain letter, you type the letter into your Bash shell and press tab to display all the suggestions. Most likely, there will be more applications than one would be able to identify readily by eye.&lt;&#x2F;p&gt;
&lt;p&gt;To make the task of finding your application easier, one can use &lt;code&gt;fzf&lt;&#x2F;code&gt; to perform real-time filtering of your application search.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>PySide6 and Matplotlib - Simple Line Plot</title>
        <published>2022-12-01T00:00:00+00:00</published>
        <updated>2022-12-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/pyside-matplotlib-simple-graph/"/>
        <id>https://williamhuey.github.io/posts/pyside-matplotlib-simple-graph/</id>
        
        <summary type="html">&lt;h3 id=&quot;fill-a-window-with-a-graph&quot;&gt;Fill a Window with a Graph&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;pypi.org&#x2F;project&#x2F;PySide6&#x2F;&quot;&gt;PySide6&lt;&#x2F;a&gt; library offers Python bindings for &lt;a href=&quot;https:&#x2F;&#x2F;doc.qt.io&#x2F;qt-6&#x2F;index.html&quot;&gt;Qt&lt;&#x2F;a&gt; which is a C++ cross-platform UI library. Qt has been in development for a long time and this will give a stable and mature platform for developing desktop applications.
PySide enables one to leverage all the packages from the Python community while using QT. The Python graphing library, &lt;a href=&quot;https:&#x2F;&#x2F;matplotlib.org&#x2F;stable&#x2F;gallery&#x2F;user_interfaces&#x2F;embedding_in_qt_sgskip.html&quot;&gt;Matplotlib&lt;&#x2F;a&gt;, becomes a naturally pairing with the QT library because Matplotlib provides integration options.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Coqui STT - Extract Words from Audio Files</title>
        <published>2022-11-02T00:00:00+00:00</published>
        <updated>2022-11-02T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/coqui-stt-extract-words-from-audio-file/"/>
        <id>https://williamhuey.github.io/posts/coqui-stt-extract-words-from-audio-file/</id>
        
        <summary type="html">&lt;h3 id=&quot;speech-to-text-cli-tool&quot;&gt;Speech to Text CLI Tool&lt;&#x2F;h3&gt;
&lt;p&gt;There could be a time when you were listening to a podcast, but you can not make out the spelling of a word that you would like to understand.
If there was a way to add a &#x27;live-caption&#x27; feature to your podcast, this will inform you of the vocabulary that you are missing. To get remedy this problem, you can use a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Speech-to-text_reporter&quot;&gt;Speech-to-Text&lt;&#x2F;a&gt; tool to output the transcript of the audio.&lt;&#x2F;p&gt;
&lt;p&gt;You might also want to convert an audio file to text if you are able to read quicker than you can listen to the audio file.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>forgit - Git with fzf</title>
        <published>2022-10-15T00:00:00+00:00</published>
        <updated>2022-10-15T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/forgit-git-with-fzf/"/>
        <id>https://williamhuey.github.io/posts/forgit-git-with-fzf/</id>
        
        <summary type="html">&lt;h3 id=&quot;fuzzy-finder-for-git-commands&quot;&gt;Fuzzy Finder for Git Commands&lt;&#x2F;h3&gt;
&lt;p&gt;The real time fuzzy finder tool fzf is a good tool to perform searches for files as well as filtering output from other command line tools. This tool complements Git really well due to the fact git has a &lt;a href=&quot;https:&#x2F;&#x2F;developers.apple.com&#x2F;library&#x2F;archive&#x2F;documentation&#x2F;Cocoa&#x2F;Conceptual&#x2F;CocoaBindings&#x2F;Tasks&#x2F;masterdetail.html&quot;&gt;master-detail&lt;&#x2F;a&gt; workflow view. When you are looking at a commit log (master), you want to look at the file changes (details) for that commit.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Docusaurus - Basic Config</title>
        <published>2022-09-10T00:00:00+00:00</published>
        <updated>2022-09-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/docusaurus-basic-config/"/>
        <id>https://williamhuey.github.io/posts/docusaurus-basic-config/</id>
        
        <summary type="html">&lt;h3 id=&quot;documentation-centric-changes&quot;&gt;Documentation-centric Changes&lt;&#x2F;h3&gt;
&lt;p&gt;Docusaurus is a JavaScript framework documentation generator. This tool provides many useful conveniences such as documentation versioning and search integration. Docusaurus gives you the ability to quickly get a working documentation site running by using a config-based means of manipulating your settings for the site. Even though it is config-based, one can drop to a lower level by changing JavaScript and styles files in the &lt;code&gt;src&lt;&#x2F;code&gt; source to make custom changes to your site.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Using Ava with Testdouble</title>
        <published>2022-08-05T00:00:00+00:00</published>
        <updated>2022-08-05T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/ava-with-testdouble/"/>
        <id>https://williamhuey.github.io/posts/ava-with-testdouble/</id>
        
        <summary type="html">&lt;h3 id=&quot;example-of-a-simple-test-case&quot;&gt;Example of a Simple Test Case&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;avajs&#x2F;ava&quot;&gt;Ava&lt;&#x2F;a&gt; is a unique testing framework in that it is one of the few testing frameworks out there that recognizes observable resolution.
It also makes asynchronous testing the default option when you write tests ensuring better performance.
Another nice feature of Ava is that it has a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;avajs&#x2F;ava#magic-assert&quot;&gt;nicer assertion output display&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;testdouble&#x2F;testdouble.js&quot;&gt;Testdouble&lt;&#x2F;a&gt; is an assertion library which specializes in create &#x27;doubles&#x27;. Testdouble is different from Sinon because Testdouble will replace the function outright for which it is substituting when mocking out a function or object. It also makes it easier to track using a &#x27;sandbox&#x27; API to alleviate the user from having to restore an original replaced function.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>JavaScript - Querying Objects</title>
        <published>2022-07-10T00:00:00+00:00</published>
        <updated>2022-07-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/javascript-querying-objects/"/>
        <id>https://williamhuey.github.io/posts/javascript-querying-objects/</id>
        
        <summary type="html">&lt;h3 id=&quot;data-querying&quot;&gt;Data Querying&lt;&#x2F;h3&gt;
&lt;p&gt;As JSON&#x2F;JavaScript objects are heavily relied upon means of accessing data, it is crucial to quickly retrieve certain pieces of information within the object quickly. For simple objects, a couple of loops will suffice in honing in to the exact detail, but most likely, the general object will be more complex.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Zola - Include Template</title>
        <published>2022-06-26T00:00:00+00:00</published>
        <updated>2022-06-26T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/zola-include-template/"/>
        <id>https://williamhuey.github.io/posts/zola-include-template/</id>
        
        <summary type="html">&lt;h3 id=&quot;common-template&quot;&gt;Common Template&lt;&#x2F;h3&gt;
&lt;p&gt;Common content that belongs on multiple pages should be situated in a template which should be shared globally. An example of would be a footer, the bottom of the page content that persists across pages. Looking at Tera, the template engine for Zola, the &lt;a href=&quot;https:&#x2F;&#x2F;tera.netlify.app&#x2F;docs&#x2F;#include&quot;&gt;include&lt;&#x2F;a&gt; feature within a template offers the capability to reference other templates.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Visual Studio Code Extensions - Quick Picks #6</title>
        <published>2022-06-12T00:00:00+00:00</published>
        <updated>2022-06-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/visual-studio-code-extensions-quick-picks-6/"/>
        <id>https://williamhuey.github.io/posts/visual-studio-code-extensions-quick-picks-6/</id>
        
        <summary type="html">&lt;h3 id=&quot;markdown-table-formatter&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;marketplace.visualstudio.com&#x2F;items?itemName=darkriszty.markdown-table-prettify&quot;&gt;Markdown Table Formatter&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;A markdown table&#x27;s formatting often tends to go awry when there is a need to change the words in the headers which affects the width of columns. It is a laborious process to have to realign all the column content that fall underneath the changed header.&lt;&#x2F;p&gt;
&lt;p&gt;To solve this issue, use the Markdown Table Formatter extension to format markdown tables. This extension will format the &#x27;basic markdown tables&#x27; such as the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;md&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-md &quot;&gt;&lt;code class=&quot;language-md&quot; data-lang=&quot;md&quot;&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; Food Item  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; Items Bought &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt;------------&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt;--------------&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; Pineapples &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; 4            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; Tomatoes   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; 3            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;However, it does not work with Pandoc&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;pandoc.org&#x2F;MANUAL.html#extension-grid_tables&quot;&gt;grid table&lt;&#x2F;a&gt; markdown output.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Bash - Display all Aliases Defined in Shell</title>
        <published>2022-06-04T00:00:00+00:00</published>
        <updated>2022-06-04T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/createpost/"/>
        <id>https://williamhuey.github.io/posts/createpost/</id>
        
        <summary type="html">&lt;h3 id=&quot;check-on-aliases-defined-in-bashrc&quot;&gt;Check on Aliases Defined in .bashrc&lt;&#x2F;h3&gt;
&lt;p&gt;If you so happen to have many alias commands in your .bashrc file and want to be reminded of them, you can list them out using the following&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;alias
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Vite - Quick Tips #1</title>
        <published>2022-05-01T00:00:00+00:00</published>
        <updated>2022-05-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/vite-quick-tips-1/"/>
        <id>https://williamhuey.github.io/posts/vite-quick-tips-1/</id>
        
        <summary type="html">&lt;h3 id=&quot;more-log-information-when-vite-server-runs&quot;&gt;More Log Information when Vite Server Runs&lt;&#x2F;h3&gt;
&lt;p&gt;Using the &lt;code&gt;-d&lt;&#x2F;code&gt; option with the Vite command in the npm script to have
more verbose output for debugging.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span style=&quot;font-style:italic;color:#5c6773;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;scripts&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;dev&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;vite -d&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;build&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;vite build&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;preview&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;vite preview&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6773;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Vite - Before the Server Starts</title>
        <published>2022-04-14T00:00:00+00:00</published>
        <updated>2022-04-14T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/vite-before-the-server-starts/"/>
        <id>https://williamhuey.github.io/posts/vite-before-the-server-starts/</id>
        
        <summary type="html">&lt;h3 id=&quot;use-the-configure-server&quot;&gt;Use the &#x27;configure-server&#x27;&lt;&#x2F;h3&gt;
&lt;p&gt;Create a Vite application from the new project command with a template option.
This command will create a simple TypeScript project.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;npm&lt;&#x2F;span&gt;&lt;span&gt; create vite@latest a-vite-test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt; --&lt;&#x2F;span&gt;&lt;span&gt; --template vanilla-ts
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Git - Custom SSH Keys Per Repository</title>
        <published>2022-03-30T00:00:00+00:00</published>
        <updated>2022-03-30T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/git-custom-ssh-key-per-repository/"/>
        <id>https://williamhuey.github.io/posts/git-custom-ssh-key-per-repository/</id>
        
        <summary type="html">&lt;h3 id=&quot;assign-git-profiles-for-different-repositories&quot;&gt;Assign Git Profiles for Different Repositories&lt;&#x2F;h3&gt;
&lt;p&gt;On occasions where you wish to associate different Git profiles to different repositories, such as when you have a work account and a personal account, one can achieve this by running a Git config command on repository level basis.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Lit Element - Constrain Global Styles in a Web Component</title>
        <published>2022-03-19T00:00:00+00:00</published>
        <updated>2022-03-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/lit-element-constrain-global-styles-in-a-web-component/"/>
        <id>https://williamhuey.github.io/posts/lit-element-constrain-global-styles-in-a-web-component/</id>
        
        <summary type="html">&lt;h3 id=&quot;linking-stylesheet-in-the-template&quot;&gt;Linking Stylesheet in the Template&lt;&#x2F;h3&gt;
&lt;p&gt;To use even a basic css library will cause some styles to be applied globally to the entire page, but you wish to localize the styling to just the web component which you are defining.&lt;&#x2F;p&gt;
&lt;p&gt;Importing the third party css library in the static style definition will not bring in the styles.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span&gt;static styles &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;css&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;`
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&#x2F;&#x2F; This won&amp;#39;t work
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;@import &amp;#39;bulma&#x2F;css&#x2F;bulma.css&amp;#39;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Git - Cherry Picking Changes but Avoid Taking the Exact Commit Log</title>
        <published>2022-03-10T00:00:00+00:00</published>
        <updated>2022-03-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/git-cherry-pick-pick-custom-commit-message/"/>
        <id>https://williamhuey.github.io/posts/git-cherry-pick-pick-custom-commit-message/</id>
        
        <summary type="html">&lt;h3 id=&quot;customize-the-cherry-picked-commit-message&quot;&gt;Customize the cherry-picked Commit Message&lt;&#x2F;h3&gt;
&lt;p&gt;You are working on a branch focusing on a certain feature, but you end up adding in commit messages that are not presentable enough to be applied to your &lt;code&gt;main&lt;&#x2F;code&gt; branch. To fix this problem, you can rebase to squash the commits and then cherry-pick the changes onto the &lt;code&gt;main&lt;&#x2F;code&gt; branch.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Lit Element - After Attribute Change</title>
        <published>2022-02-27T00:00:00+00:00</published>
        <updated>2022-02-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/lit-element-attribute-change/"/>
        <id>https://williamhuey.github.io/posts/lit-element-attribute-change/</id>
        
        <summary type="html">&lt;h3 id=&quot;wait-for-dom-change-before-taking-action&quot;&gt;Wait for DOM Change before Taking Action&lt;&#x2F;h3&gt;
&lt;p&gt;Assume that we have a button which sets up with a click event listener to call upon a toggling of state to display an associated container:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;{ LitElement&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;html } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;lit-element&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#59c2ff;&quot;&gt;MyElement &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;text-decoration:underline;color:#59c2ff;&quot;&gt;LitElement &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;render&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;`
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;      &amp;lt;button @click=&amp;quot;${&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#39bae6;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;_handleClick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;}&amp;quot;&amp;gt;click&amp;lt;&#x2F;button&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;      &amp;lt;div id=&amp;quot;container&amp;quot; class=${&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#39bae6;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;open &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;#39;expanded&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;#39;collapsed&amp;#39;}&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;        The contents.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;      &amp;lt;&#x2F;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;    `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;_handleClick&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#39bae6;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;_toggleContainer&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6773;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6773;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Emotion Css with Linaria</title>
        <published>2022-02-17T00:00:00+00:00</published>
        <updated>2022-02-17T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/emotion-css-with-linaria/"/>
        <id>https://williamhuey.github.io/posts/emotion-css-with-linaria/</id>
        
        <summary type="html">&lt;h3 id=&quot;share-global-styles-on-compile-and-runtime&quot;&gt;Share Global Styles on Compile and Runtime&lt;&#x2F;h3&gt;
&lt;p&gt;Linaria is able to achieve zero-runtime css-in-js because it compiles the js to css before the local dev server startup, however one might wish to share and modify styles used by Linaria during development.&lt;&#x2F;p&gt;
&lt;p&gt;Since one can&#x27;t use Linaria when the dev server is running for client css-in-js, the base styles will need to be handed over to another css-in-js library for modification.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Redefined a Web Component</title>
        <published>2022-02-05T00:00:00+00:00</published>
        <updated>2022-02-05T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/redefined-a-web-component/"/>
        <id>https://williamhuey.github.io/posts/redefined-a-web-component/</id>
        
        <summary type="html">&lt;h3 id=&quot;hmr-with-web-components&quot;&gt;HMR with Web Components&lt;&#x2F;h3&gt;
&lt;p&gt;Say that you are using HMR in conjunction with web components for your layouts, you would expect a change in the component&#x27;s JavaScript logic to trigger the HMR code to re-register the component.&lt;&#x2F;p&gt;
&lt;p&gt;However, there isn&#x27;t a way to redefine a web component once it has already been defined and registered onto the page, an error will be thrown if you tried to redefine the web component again.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Snowpack - HMR - Compare Old and New Value</title>
        <published>2022-01-29T00:00:00+00:00</published>
        <updated>2022-01-29T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/snowpack-hmr-compare-old-and-new-value/"/>
        <id>https://williamhuey.github.io/posts/snowpack-hmr-compare-old-and-new-value/</id>
        
        <summary type="html">&lt;h3 id=&quot;export-value-for-comparison&quot;&gt;Export Value for Comparison&lt;&#x2F;h3&gt;
&lt;p&gt;HMR is a convenient tool to have when one wishes to perform updates to a page without fully reloading the whole page. When using Snowpack&#x27;s HMR, one can compare a variable&#x27;s value prior to it being changed.&lt;&#x2F;p&gt;
&lt;p&gt;This feature might come in handy when you want to perform resets after a set amount of time has passed for a user session, but there also might be a requirement to restore certain pieces of old information back into a new session.
For example, in a privacy-sensitive form area, a notice can come up in area that does not require a full refresh as a top status bar after a time-out period.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Snowpack - Dev Server - Compile Css on Server Start</title>
        <published>2022-01-22T00:00:00+00:00</published>
        <updated>2022-01-22T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/snowpack-dev-server-compile-css-on-server-start/"/>
        <id>https://williamhuey.github.io/posts/snowpack-dev-server-compile-css-on-server-start/</id>
        
        <summary type="html">&lt;h3 id=&quot;linaria-cli&quot;&gt;Linaria CLI&lt;&#x2F;h3&gt;
&lt;p&gt;CSS-in-Js styles are quite modular given their ability to be associated with components, but it is also helpful to have the option to compile some styles ahead of time for a html page to use. This behavior is desired if there are common global styles that referenced by all pages. Having minimum styles on the page in a css file also helps to prevent the flash of unstyled content.&lt;&#x2F;p&gt;
&lt;p&gt;In the following example, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;callstack&#x2F;linaria&quot;&gt;Linaria&lt;&#x2F;a&gt; will be shown as the CSS-in-Js of choice since this library supports compilation during build.&lt;&#x2F;p&gt;
&lt;p&gt;Create a new project and install the project dependencies:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;npm&lt;&#x2F;span&gt;&lt;span&gt; install snowpack @snowpack&#x2F;plugin-run-script @linaria&#x2F;cli @linaria&#x2F;shaker
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Document Fragment with Kor UI</title>
        <published>2022-01-15T00:00:00+00:00</published>
        <updated>2022-01-15T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/document-fragment-kor-ui/"/>
        <id>https://williamhuey.github.io/posts/document-fragment-kor-ui/</id>
        
        <summary type="html">&lt;h3 id=&quot;dynamically-adding-lit-elements-into-page&quot;&gt;Dynamically Adding Lit Elements into Page&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;lit.dev&#x2F;&quot;&gt;Lit elements&lt;&#x2F;a&gt; are an implementation of &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;Web_Components&quot;&gt;web components&lt;&#x2F;a&gt;. Lit elements are useful because it encourages component reuse across different JavaScript frameworks, which leads to reduced development time.&lt;&#x2F;p&gt;
&lt;p&gt;The traditional usage of Lit elements &#x2F; web components involves defining the component inside your html page, however there might be instances where you do not wish to modify the html page by introducing the web component markup. The introduced web components might serve only as an assistive means for using the page, but the html export of the page must remain immaculate.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Ramda - Quick Tips #1</title>
        <published>2022-01-04T00:00:00+00:00</published>
        <updated>2022-01-04T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/ramda-quick-tips-1/"/>
        <id>https://williamhuey.github.io/posts/ramda-quick-tips-1/</id>
        
        <summary type="html">&lt;h3 id=&quot;remove-falsey-values-from-an-array&quot;&gt;Remove Falsey Values from an Array&lt;&#x2F;h3&gt;
&lt;p&gt;Use &lt;a href=&quot;https:&#x2F;&#x2F;ramdajs.com&#x2F;docs&#x2F;#without&quot;&gt;&lt;code&gt;without&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; as a means to remove falsey values from your arrays. The first argument to the &lt;code&gt;without&lt;&#x2F;code&gt; method takes in an array which will represent the elements which are to be removed when found in the second argument array. You can include any values in the first argument array which you deem to be a &quot;falsey&quot; value.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;R&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;without&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;])&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6773;&quot;&gt;&#x2F;&#x2F; Outputs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6773;&quot;&gt;&#x2F;&#x2F; [1, 2, 3, 4, 5]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>SuperTest - Testing a Server</title>
        <published>2021-12-26T00:00:00+00:00</published>
        <updated>2021-12-26T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/supertest-testing-a-server/"/>
        <id>https://williamhuey.github.io/posts/supertest-testing-a-server/</id>
        
        <summary type="html">&lt;h3 id=&quot;check-content-type&quot;&gt;Check Content-Type&lt;&#x2F;h3&gt;
&lt;p&gt;Testing a simple static file server is made simple when using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;visionmedia&#x2F;supertest&quot;&gt;SuperTest&lt;&#x2F;a&gt;.
It permits for the testing of HTTP methods, content-type, response body and many &lt;a href=&quot;https:&#x2F;&#x2F;visionmedia.github.io&#x2F;superagent&#x2F;&quot;&gt;more options&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Supposedly you wish to test a basic http server which serves the common zip, jpg, and html files. This server example uses only the native Nodejs modules: &lt;code&gt;http&lt;&#x2F;code&gt;, &lt;code&gt;fs&lt;&#x2F;code&gt;, and &lt;code&gt;path&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Visual Studio Code Extensions - Quick Picks #5</title>
        <published>2021-12-19T00:00:00+00:00</published>
        <updated>2021-12-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/visual-studio-code-extensions-quick-picks-5/"/>
        <id>https://williamhuey.github.io/posts/visual-studio-code-extensions-quick-picks-5/</id>
        
        <summary type="html">&lt;h3 id=&quot;lorem-ipsum&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;marketplace.visualstudio.com&#x2F;items?itemName=Tyriar.lorem-ipsum&quot;&gt;Lorem Ipsum&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Use this plugin to fill out placeholder paragraphs. Helpful to see how content flows in html in a layout template or to check for text overflows.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>CBOR - JSON Encoding</title>
        <published>2021-12-12T00:00:00+00:00</published>
        <updated>2021-12-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/cbor-json-encoding/"/>
        <id>https://williamhuey.github.io/posts/cbor-json-encoding/</id>
        
        <summary type="html">&lt;h3 id=&quot;compact-binary-format-for-json-data-transfer&quot;&gt;Compact Binary Format for JSON Data Transfer&lt;&#x2F;h3&gt;
&lt;p&gt;When you wish to use JSON for its convenience, but also want to send the JSON using a more compact representation to save data that needs to be transfer, you will need to use an information encoder for JSON. These encoders tend to represent the JSON data in binary format for transfer and there are many &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Comparison_of_data-serialization_formats&quot;&gt;out there&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Nodejs - Quick Picks #3</title>
        <published>2021-12-05T00:00:00+00:00</published>
        <updated>2021-12-05T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/nodejs-quick-picks-3/"/>
        <id>https://williamhuey.github.io/posts/nodejs-quick-picks-3/</id>
        
        <summary type="html">&lt;h3 id=&quot;get-port&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.npmjs.com&#x2F;package&#x2F;get-port&quot;&gt;Get Port&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Getting an open TCP port is useful when you wish to run a server on a port without knowing which ports are currently available.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Pdf Generation with Playwright</title>
        <published>2021-11-28T00:00:00+00:00</published>
        <updated>2021-11-28T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/pdf-generation-with-playwright/"/>
        <id>https://williamhuey.github.io/posts/pdf-generation-with-playwright/</id>
        
        <summary type="html">&lt;h3 id=&quot;alternative-to-puppeteer-for-pdf-generation&quot;&gt;Alternative to Puppeteer for PDF Generation&lt;&#x2F;h3&gt;
&lt;p&gt;While puppeteer is a popular option used for testing as well as pdf generation for webpages, playwright is also another option that can perform these tasks and &lt;a href=&quot;https:&#x2F;&#x2F;www.infoq.com&#x2F;news&#x2F;2020&#x2F;01&#x2F;playwright-browser-automation&#x2F;&quot;&gt;more&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>gitignore - Exclusions for Ignore</title>
        <published>2021-11-21T00:00:00+00:00</published>
        <updated>2021-11-21T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/gitignore-exclusions-for-ignore/"/>
        <id>https://williamhuey.github.io/posts/gitignore-exclusions-for-ignore/</id>
        
        <summary type="html">&lt;h3 id=&quot;avoid-ignoring-folders-that-has-files-within-them-to-ignore&quot;&gt;Avoid Ignoring Folders that has Files Within them to Ignore&lt;&#x2F;h3&gt;
&lt;p&gt;Supposedly, there is a need to ignore generated content within a folder called &quot;temp&quot;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;# .gitignore
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;test&#x2F;temp&#x2F;*
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>TypeScript - String Enum for Checking Value Type</title>
        <published>2021-11-14T00:00:00+00:00</published>
        <updated>2021-11-14T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/typescript-string-enum-for-checking-value-type/"/>
        <id>https://williamhuey.github.io/posts/typescript-string-enum-for-checking-value-type/</id>
        
        <summary type="html">&lt;h3 id=&quot;ramda-s-type-check&quot;&gt;Ramda&#x27;s Type Check&lt;&#x2F;h3&gt;
&lt;p&gt;Ramda&#x27;s type checking returns a string, but in order for this to be useful, one needs to know if the returned value matches your intended assertion.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;R&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;({})&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6773;&quot;&gt;&#x2F;&#x2F;=&amp;gt; &amp;quot;Object&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;R&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6773;&quot;&gt;&#x2F;&#x2F;=&amp;gt; &amp;quot;Number&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;R&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6773;&quot;&gt;&#x2F;&#x2F;=&amp;gt; &amp;quot;Boolean&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;R&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;#39;s&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6773;&quot;&gt;&#x2F;&#x2F;=&amp;gt; &amp;quot;String&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;R&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6773;&quot;&gt;&#x2F;&#x2F;=&amp;gt; &amp;quot;Null&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;R&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;([])&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6773;&quot;&gt;&#x2F;&#x2F;=&amp;gt; &amp;quot;Array&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;R&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#95e6cb;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;[A-z]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#95e6cb;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6773;&quot;&gt;&#x2F;&#x2F;=&amp;gt; &amp;quot;RegExp&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;R&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;(() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{})&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6773;&quot;&gt;&#x2F;&#x2F;=&amp;gt; &amp;quot;Function&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;R&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;undefined&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6773;&quot;&gt;&#x2F;&#x2F;=&amp;gt; &amp;quot;Undefined&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Nodejs - Memory Intensive Promise Operations</title>
        <published>2021-11-07T00:00:00+00:00</published>
        <updated>2021-11-07T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/nodejs-memory-intensive-promise-operations/"/>
        <id>https://williamhuey.github.io/posts/nodejs-memory-intensive-promise-operations/</id>
        
        <summary type="html">&lt;h3 id=&quot;backpressure-for-promises&quot;&gt;Backpressure for Promises&lt;&#x2F;h3&gt;
&lt;p&gt;When dealing with promises, the processing of long-running tasks is the commonly encountered scenario. However, some long-running task might also be performing memory intensive operations. To deal with running multiple operations at once, it is important to place a limit on the number of promises allowed to run at the same time as to not exhaust the Nodejs JavaScript heap.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Nodejs - Quick Picks #2</title>
        <published>2021-10-31T00:00:00+00:00</published>
        <updated>2021-10-31T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/nodejs-quick-pick-2/"/>
        <id>https://williamhuey.github.io/posts/nodejs-quick-pick-2/</id>
        
        <summary type="html">&lt;h3 id=&quot;cjstoesm&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.npmjs.com&#x2F;package&#x2F;cjstoesm&quot;&gt;Cjstoesm&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Automate the process of converting over JavaScript files in the cjs format to the newer ESM format with the command line.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Visual Studio Code Extensions - Quick Picks #4</title>
        <published>2021-10-24T00:00:00+00:00</published>
        <updated>2021-10-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/visual-studio-code-extensions-quick-picks-4/"/>
        <id>https://williamhuey.github.io/posts/visual-studio-code-extensions-quick-picks-4/</id>
        
        <summary type="html">&lt;h3 id=&quot;gremlins-tracker-for-visual-studio-code&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;marketplace.visualstudio.com&#x2F;items?itemName=nhoizey.gremlins&quot;&gt;Gremlins Tracker for Visual Studio Code&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Invisible characters that are non-standard in certain file types may cause unexpected problems. This plugin will highlight these whitespace characters in your files.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Snowpack - Font URLs in CSS</title>
        <published>2021-10-17T00:00:00+00:00</published>
        <updated>2021-10-17T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/snowpack-font-url-in-css/"/>
        <id>https://williamhuey.github.io/posts/snowpack-font-url-in-css/</id>
        
        <summary type="html">&lt;h3 id=&quot;problem-with-url-resolution&quot;&gt;Problem with URL Resolution&lt;&#x2F;h3&gt;
&lt;p&gt;Up to Snowpack version 3.8.8, there is an issue with how Snowpack resolves path references inside CSS files. This often creates a problem when importing font files as mentioned on this &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;snowpackjs&#x2F;snowpack&#x2F;discussions&#x2F;1573&quot;&gt;page&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Nodejs - Executing Pandoc Command for LaTeX</title>
        <published>2021-10-10T00:00:00+00:00</published>
        <updated>2021-10-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/nodejs-executing-pandoc-command-for-latex/"/>
        <id>https://williamhuey.github.io/posts/nodejs-executing-pandoc-command-for-latex/</id>
        
        <summary type="html">&lt;h3 id=&quot;ensuring-consistent-execution-path&quot;&gt;Ensuring Consistent Execution Path&lt;&#x2F;h3&gt;
&lt;p&gt;In this example, a script might refer to a file, index.tex, which is referenced by Pandoc to convert a file located within a folder:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;&#x2F;contents
&lt;&#x2F;span&gt;&lt;span&gt;  index.tex
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;#39;pandoc&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;#39;&#x2F;the&#x2F;full&#x2F;path&#x2F;to&#x2F;contents&#x2F;index.tex&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;#39;-o&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;#39;&#x2F;the&#x2F;full&#x2F;path&#x2F;to&#x2F;output&#x2F;index.html&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;#39;-s&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;])&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Snowpack - Running Tests with @web&#x2F;test-runner</title>
        <published>2021-10-03T00:00:00+00:00</published>
        <updated>2021-10-03T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/snowpack-testing-web-test-runner/"/>
        <id>https://williamhuey.github.io/posts/snowpack-testing-web-test-runner/</id>
        
        <summary type="html">&lt;h3 id=&quot;set-up-web-test-runner&quot;&gt;Set up @web&#x2F;test-runner&lt;&#x2F;h3&gt;
&lt;p&gt;Snowpack recommends that &lt;a href=&quot;https:&#x2F;&#x2F;www.snowpack.dev&#x2F;guides&#x2F;web-test-runner#nav-primary&quot;&gt;@web&#x2F;test-runner&lt;&#x2F;a&gt; be used as the test runner of choice. Using this setup will allow you to conveniently run tests that would run in the browser after the Snowpack dev server has started.&lt;&#x2F;p&gt;
&lt;p&gt;First, install the dependencies found in the &quot;devDependencies&quot; in package.json with&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;npm&lt;&#x2F;span&gt;&lt;span&gt; install @esm-bundle&#x2F;chai @snowpack&#x2F;web-test-runner-plugin @web&#x2F;test-runner
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Rust - Serde - Iterating Over JSON keys</title>
        <published>2021-09-26T00:00:00+00:00</published>
        <updated>2021-09-26T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/rust-serde-iterating-over-json-keys/"/>
        <id>https://williamhuey.github.io/posts/rust-serde-iterating-over-json-keys/</id>
        
        <summary type="html">&lt;h3 id=&quot;retrieving-data-from-json&quot;&gt;Retrieving data from JSON&lt;&#x2F;h3&gt;
&lt;p&gt;The usefulness of reading a JSON file with Serde is being able to iterate over the data, and as a continuation of the post in &lt;a href=&quot;https:&#x2F;&#x2F;williamhuey.github.io&#x2F;posts&#x2F;rust-read-json-file&#x2F;&quot;&gt;serde - Read JSON File&lt;&#x2F;a&gt;, this article will focus on looping over data once a JSON file data has been read.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Nodejs - Quick Picks #1</title>
        <published>2021-09-19T00:00:00+00:00</published>
        <updated>2021-09-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/nodejs-quick-picks-1/"/>
        <id>https://williamhuey.github.io/posts/nodejs-quick-picks-1/</id>
        
        <summary type="html">&lt;h3 id=&quot;sabik&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.npmjs.com&#x2F;package&#x2F;sabik&quot;&gt;Sabik&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Analyze the quality of your codebase by calculating the following metrics:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Cognitive Complexity&lt;&#x2F;li&gt;
&lt;li&gt;Halstead complexity measures&lt;&#x2F;li&gt;
&lt;li&gt;Line of Code (Logical, Physical)&lt;&#x2F;li&gt;
&lt;li&gt;Maintainability&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Nodejs - Download Npm Module for Testing</title>
        <published>2021-09-12T00:00:00+00:00</published>
        <updated>2021-09-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/download-npm-module-for-testing/"/>
        <id>https://williamhuey.github.io/posts/download-npm-module-for-testing/</id>
        
        <summary type="html">&lt;h3 id=&quot;reliance-on-another-npm-module&quot;&gt;Reliance on another NPM module&lt;&#x2F;h3&gt;
&lt;p&gt;A Npm module which is heavily dependent on another Npm module because the module being written wraps another module&#x27;s methods, and it might entail having to download the other module during testing.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Rust - Quick Picks #1</title>
        <published>2021-09-05T00:00:00+00:00</published>
        <updated>2021-09-05T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/rust-quick-picks-1/"/>
        <id>https://williamhuey.github.io/posts/rust-quick-picks-1/</id>
        
        <summary type="html">&lt;h3 id=&quot;ripgrep-all&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;ripgrep_all&quot;&gt;Ripgrep-all&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Using ripgrep-all will enable you to search more than just within source code files, it lets you search inside content such as &quot;PDFs, E-Books, Office documents, zip, tar.gz, etc.&quot; due to it leveraging ripgrep. This versatility brings a search tool that is close to what you expect from an operating system index file search, except now you can have a more targeted searching experience.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Rust - fzf Alternative with Skim</title>
        <published>2021-08-29T00:00:00+00:00</published>
        <updated>2021-08-29T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/rust-fzf-alternative-skim/"/>
        <id>https://williamhuey.github.io/posts/rust-fzf-alternative-skim/</id>
        
        <summary type="html">&lt;h3 id=&quot;open-file-with-real-time-fuzzy-search&quot;&gt;Open File with Real-Time Fuzzy Search&lt;&#x2F;h3&gt;
&lt;p&gt;Using an interactive CLI search tool can be a big productivity booster when you are uncertain of which files contain the term you are trying to seek out. You will end up performing multiple searches at a time and may jump into multiple files in doing so. GUI tools will be able to perform such a task, but using Skim offers you the ability to perform this task much faster since it is a keyboard focus tool with instant feedback in mind.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>RxJS - Stop Observable During an Interval</title>
        <published>2021-08-22T00:00:00+00:00</published>
        <updated>2021-08-22T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/rxjs-stop-observable-on-interval/"/>
        <id>https://williamhuey.github.io/posts/rxjs-stop-observable-on-interval/</id>
        
        <summary type="html">&lt;h3 id=&quot;replicate-pause-on-an-observable-trigger&quot;&gt;Replicate Pause on an Observable Trigger&lt;&#x2F;h3&gt;
&lt;p&gt;A way to simulate a pause of an observable from triggering is to stop it and to restart it.&lt;&#x2F;p&gt;
&lt;p&gt;One might wish to pause an observable because the observable might have activated the run of an expensive or long-running operation such a mathematical computation or a network request and there is a need to have a temporary block on the triggering observable.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Visual Studio Code Extensions - Quick Picks #3</title>
        <published>2021-08-15T00:00:00+00:00</published>
        <updated>2021-08-15T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/visual-studio-code-extensions-quick-picks-3/"/>
        <id>https://williamhuey.github.io/posts/visual-studio-code-extensions-quick-picks-3/</id>
        
        <summary type="html">&lt;h3 id=&quot;auto-close-tag&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;marketplace.visualstudio.com&#x2F;items?itemName=formulahendry.auto-close-tag&quot;&gt;Auto Close Tag&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;This plugin will automatically create an HTML closing tag when you start off a new tag. This will halve the typing work that you have to do when you are manually creating HTML tags by hand.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>RxJS - Buffer with a Pipe Chain</title>
        <published>2021-08-08T00:00:00+00:00</published>
        <updated>2021-08-08T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/rxjs-buffer-take/"/>
        <id>https://williamhuey.github.io/posts/rxjs-buffer-take/</id>
        
        <summary type="html">&lt;h3 id=&quot;get-one-event-from-the-group&quot;&gt;Get One Event from the Group&lt;&#x2F;h3&gt;
&lt;p&gt;A buffer serves to aggregate multiples of the same observable event type.
However, the example shown for buffer in the official RxJS docs assumes that you have an originating source in the start of the chain which serves as the group of events for buffering as shown in &lt;a href=&quot;https:&#x2F;&#x2F;rxjs.dev&#x2F;api&#x2F;operators&#x2F;buffer&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Rustup - Serde - Read JSON File</title>
        <published>2021-08-01T00:00:00+00:00</published>
        <updated>2021-08-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/rust-read-json-file/"/>
        <id>https://williamhuey.github.io/posts/rust-read-json-file/</id>
        
        <summary type="html">&lt;p&gt;This is an example on using the &lt;code&gt;serde_json&lt;&#x2F;code&gt; &lt;a href=&quot;https:&#x2F;&#x2F;docs.serde.rs&#x2F;serde_json&#x2F;&quot;&gt;library&lt;&#x2F;a&gt; to read JSON data stored in a file. Serde doesn&#x27;t have a method to directly read from your file directory and get the data from the JSON file, so it will be a two-step process.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Rustup Toolchain</title>
        <published>2021-07-25T00:00:00+00:00</published>
        <updated>2021-07-25T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/rustup-toolchain/"/>
        <id>https://williamhuey.github.io/posts/rustup-toolchain/</id>
        
        <summary type="html">&lt;h3 id=&quot;configure-rust-environments&quot;&gt;Configure Rust Environments&lt;&#x2F;h3&gt;
&lt;p&gt;The official rustup toolchain allows you to manage different versions of Rust along with their configurations. Different Rust applications or projects might force you to use a specific version of Rust.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Visual Studio Code Extensions - Quick Picks #2</title>
        <published>2021-07-18T00:00:00+00:00</published>
        <updated>2021-07-18T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/visual-studio-code-extensions-quick-picks-2/"/>
        <id>https://williamhuey.github.io/posts/visual-studio-code-extensions-quick-picks-2/</id>
        
        <summary type="html">&lt;h3 id=&quot;activitus-bar&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;marketplace.visualstudio.com&#x2F;items?itemName=Gruntfuggly.activitusbar&quot;&gt;Activitus Bar&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Reduce the amount of screen real estate space that that default toolbar icons take up on the left side of the window. With this plugin, the icons are shrunken and placed in the lower left corner of the window to get out of your way.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>D3FC - X-Axis Adjustments</title>
        <published>2021-07-11T00:00:00+00:00</published>
        <updated>2021-07-11T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/d3fc-axis-adjustments/"/>
        <id>https://williamhuey.github.io/posts/d3fc-axis-adjustments/</id>
        
        <summary type="html">&lt;h3 id=&quot;label-modifications&quot;&gt;Label Modifications&lt;&#x2F;h3&gt;
&lt;p&gt;D3FC provides a nice layer of convenient customization over D3 when working with basic construction of graphs such as when tweaking axis labels. The following examples will be a modification of the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;d3fc&#x2F;d3fc&#x2F;blob&#x2F;master&#x2F;docs&#x2F;building-a-chart.md&quot;&gt;base example&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Python - Quick Picks #1</title>
        <published>2021-07-04T00:00:00+00:00</published>
        <updated>2021-07-04T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/python-quick-picks-1/"/>
        <id>https://williamhuey.github.io/posts/python-quick-picks-1/</id>
        
        <summary type="html">&lt;h3 id=&quot;seleniumbase&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;seleniumbase&#x2F;SeleniumBase&#x2F;&quot;&gt;SeleniumBase&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;To avoid the verbosity of Selenium while still being able to leverage Selenium,
one can use SeleniumBase. SeleniumBase provides sensible defaults for testing
when you wish to use Selenium. The common testing setup recommended by Selenium called the &lt;a href=&quot;https:&#x2F;&#x2F;www.selenium.dev&#x2F;documentation&#x2F;en&#x2F;guidelines_and_recommendations&#x2F;page_object_models&#x2F;&quot;&gt;POM&lt;&#x2F;a&gt; is supported.
This is shown by the example: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;seleniumbase&#x2F;SeleniumBase&#x2F;blob&#x2F;master&#x2F;examples&#x2F;boilerplates&#x2F;base_test_case.py&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;seleniumbase&#x2F;SeleniumBase&#x2F;blob&#x2F;master&#x2F;examples&#x2F;boilerplates&#x2F;base_test_case.py&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Vite - Local Plugin</title>
        <published>2021-06-27T00:00:00+00:00</published>
        <updated>2021-06-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/vite-local-plugin-file-type-change/"/>
        <id>https://williamhuey.github.io/posts/vite-local-plugin-file-type-change/</id>
        
        <summary type="html">&lt;h3 id=&quot;custom-file-type-change-detection&quot;&gt;Custom File Type Change Detection&lt;&#x2F;h3&gt;
&lt;p&gt;Vite has a plugin system where a transform may be performed on file type changes in the following:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;vitejs.dev&#x2F;guide&#x2F;api-plugin.html#transforming-custom-file-types&quot;&gt;https:&#x2F;&#x2F;vitejs.dev&#x2F;guide&#x2F;api-plugin.html#transforming-custom-file-types&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Even though the documentation states that transforms might be performed on &quot;custom file types&quot;, attempts to listen to changes for file types other than the common web assets type (.js, .ts, .html, .css) will not work.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Image Panning</title>
        <published>2021-06-20T00:00:00+00:00</published>
        <updated>2021-06-20T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/image-panning/"/>
        <id>https://williamhuey.github.io/posts/image-panning/</id>
        
        <summary type="html">&lt;h3 id=&quot;scrollbar-considerations&quot;&gt;Scrollbar Considerations&lt;&#x2F;h3&gt;
&lt;p&gt;Many zooming libraries on npm offers the ability to pan images (translate images), after a large image has been zoomed in, however the majority of them do not take consideration of how the movement of the image affects the visibility of scrollbars.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Give Screenshots More Space</title>
        <published>2021-06-13T00:00:00+00:00</published>
        <updated>2021-06-13T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/css-give-screenshots-more-space/"/>
        <id>https://williamhuey.github.io/posts/css-give-screenshots-more-space/</id>
        
        <summary type="html">&lt;h3 id=&quot;screenshot-to-gutters&quot;&gt;Screenshot To Gutters&lt;&#x2F;h3&gt;
&lt;p&gt;While taking an image screenshot of an entire software application such as the browser or terminal intact yields the most information when attempting to describe the behavior. It can be a bit difficult to discern what is actually happening in the application due to the &quot;zoomed out&quot; nature of the taken image.
It is rare that a user will need to focus on the entirety of the image when a
screenshot is shown, because only a certain portion of image is reference at
one time.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Visual Studio Code Extensions - Quick Picks #1</title>
        <published>2021-06-10T00:00:00+00:00</published>
        <updated>2021-06-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/visual-studio-code-extensions-quick-picks-1/"/>
        <id>https://williamhuey.github.io/posts/visual-studio-code-extensions-quick-picks-1/</id>
        
        <summary type="html">&lt;h3 id=&quot;active-document-indicator&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;marketplace.visualstudio.com&#x2F;items?itemName=ojkwon.vscode-activedocumentindicator&amp;amp;ssr=false&quot;&gt;Active Document Indicator&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Better discern the active editor group by using highlight emphasis on the current editor group while dimming inactive editor groups. This helps with accessibility even though it might only be a small visual change, it is effective in providing more focused editing.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Snowpack - JavaScript Api</title>
        <published>2021-06-03T00:00:00+00:00</published>
        <updated>2021-06-03T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/snowpack-javascript-api/"/>
        <id>https://williamhuey.github.io/posts/snowpack-javascript-api/</id>
        
        <summary type="html">&lt;h3 id=&quot;control-over-start&quot;&gt;Control Over Start&lt;&#x2F;h3&gt;
&lt;p&gt;When the Snowpack CLI is not able to provide fine-tune control over start operations, the Snowpack JavaScript Api should be used. Being able to programmatically control Snowpack is made possible when invoked inside other JavaScript files for enabling more configuration options.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Testing OpenApi Spec File against Api Server URLs</title>
        <published>2021-05-26T00:00:00+00:00</published>
        <updated>2021-05-26T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/testing-openapi-spec-file-against-api-server-urls/"/>
        <id>https://williamhuey.github.io/posts/testing-openapi-spec-file-against-api-server-urls/</id>
        
        <summary type="html">&lt;h3 id=&quot;verifying-apis&quot;&gt;Verifying Apis&lt;&#x2F;h3&gt;
&lt;p&gt;Upon creating a REST API and then documenting with OpenApi, the entire set of routes are defined and described properly when the proper care is taken. To ensure that the server provides an Api that matches up to the OpenApi specification JSON or YAML, testing will be required.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Nestjs - OpenApi Example</title>
        <published>2021-05-19T00:00:00+00:00</published>
        <updated>2021-05-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/nestjs-openapi-example/"/>
        <id>https://williamhuey.github.io/posts/nestjs-openapi-example/</id>
        
        <summary type="html">&lt;h3 id=&quot;documenting-apis&quot;&gt;Documenting Apis&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nestjs.com&#x2F;&quot;&gt;Nestjs&lt;&#x2F;a&gt; provides a more opinionated way in expressing structure when developing a backend for your Node.js application, and this prescribed way of doing things coupled with the usage of TypeScript allows for better maintainable code.&lt;&#x2F;p&gt;
&lt;p&gt;As stated in their project &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nestjs&#x2F;nest#philosophy&quot;&gt;README.md&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Nest aims to provide an application architecture out of the box which allows for effortless creation of highly testable, scalable, loosely coupled and easily maintainable applications. The architecture is heavily inspired by Angular.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>reStructuredText - Include External Documents</title>
        <published>2021-05-13T00:00:00+00:00</published>
        <updated>2021-05-13T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/restructuredtext-include-external-files/"/>
        <id>https://williamhuey.github.io/posts/restructuredtext-include-external-files/</id>
        
        <summary type="html">&lt;h3 id=&quot;inline-variables-within-a-paragraph&quot;&gt;Inline Variables Within a Paragraph&lt;&#x2F;h3&gt;
&lt;p&gt;For general reuse, one can reference another file in reStructuredText using the &lt;code&gt;include&lt;&#x2F;code&gt; directive.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rst&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-rst &quot;&gt;&lt;code class=&quot;language-rst&quot; data-lang=&quot;rst&quot;&gt;&lt;span style=&quot;font-style:italic;color:#5c6773;&quot;&gt;.. main.rst - this document will the insert the external content from the path below
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6773;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span&gt;.. include&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt; the&#x2F;path&#x2F;to&#x2F;my-included-file.rst
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is good when the content which you want to embed directly into your document can stand by itself as a separate paragraph, however, if you wish to embed content inline within an existing paragraph, it would be necessary to place the included content as variables in another document with the following example.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Oclif - Delegate &#x2F; Wrap Existing CLI Commands</title>
        <published>2021-05-07T00:00:00+00:00</published>
        <updated>2021-05-07T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/oclif-delegate-wrap-cli-commands/"/>
        <id>https://williamhuey.github.io/posts/oclif-delegate-wrap-cli-commands/</id>
        
        <summary type="html">&lt;h3 id=&quot;cli-wrap-with-spawn-and-programmatic-access&quot;&gt;CLI Wrap with Spawn and Programmatic Access&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.npmjs.com&#x2F;package&#x2F;oclif&quot;&gt;Oclif&lt;&#x2F;a&gt; is a Nodejs command line generator tool that grants you the ability to conveniently create a CLI with the following&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;npx&lt;&#x2F;span&gt;&lt;span&gt; oclif single mycoollistofthings
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Supposedly you have your own custom CLI, but you wish to delegate some of these commands to an existing CLI tool. You are then wrapping another CLI command for the intent of adding additional functionality with &lt;code&gt;mycoollistofthings&lt;&#x2F;code&gt;. Here is the new command&#x27;s mapping behavior of the &lt;code&gt;ls -r&lt;&#x2F;code&gt; command.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;npx&lt;&#x2F;span&gt;&lt;span&gt; mycoollistofthings&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt; -r
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Playwright - Cleaner Promise Chains</title>
        <published>2021-05-01T00:00:00+00:00</published>
        <updated>2021-05-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/playwright-fluent-api/"/>
        <id>https://williamhuey.github.io/posts/playwright-fluent-api/</id>
        
        <summary type="html">&lt;h3 id=&quot;fluent-api&quot;&gt;Fluent API&lt;&#x2F;h3&gt;
&lt;p&gt;As with many JavaScript libraries, asynchronous operations are dealt with using promises, and the commonly preferred way of structuring promises flows entails the use of async &#x2F; await.&lt;&#x2F;p&gt;
&lt;p&gt;From the Playwright documentation&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;{ webkit } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;require&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;#39;playwright&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;async &lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;browser &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span&gt;webkit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;launch&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;page &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span&gt;browser&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;newPage&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span&gt;page&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;goto&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;#39;http:&#x2F;&#x2F;whatsmyuseragent.org&#x2F;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span&gt;page&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;screenshot&lt;&#x2F;span&gt;&lt;span&gt;({ path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;`example.png` &lt;&#x2F;span&gt;&lt;span&gt;})&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span&gt;browser&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;})()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Every page operation will require the use of an await since each yields a promise. However, this simple example shows the extra effort needed to tame async control flow by having to prepend each operation with an await. This is a bit noisy and detracts from the true intent of the tests steps.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Pandoc - LaTeX - Table of Contents</title>
        <published>2021-04-24T00:00:00+00:00</published>
        <updated>2021-04-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/pandoc-latex-table-of-contents/"/>
        <id>https://williamhuey.github.io/posts/pandoc-latex-table-of-contents/</id>
        
        <summary type="html">&lt;h3 id=&quot;chapter-links&quot;&gt;Chapter Links&lt;&#x2F;h3&gt;
&lt;p&gt;As a LateX document accumulates more content, navigating to a specific piece of information would be cumbersome if there was not an easy way to quickly jump to the area of interest. Providing a table of contents in the beginning of the document will greatly enhance the ability to find relevant data.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>RxJS - Library Picks #1</title>
        <published>2021-04-14T00:00:00+00:00</published>
        <updated>2021-04-14T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/rxjs-library-picks-1/"/>
        <id>https://williamhuey.github.io/posts/rxjs-library-picks-1/</id>
        
        <summary type="html">&lt;h3 id=&quot;rxdeep&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.npmjs.com&#x2F;package&#x2F;rxdeep&quot;&gt;Rxdeep&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;For the easier determination of a value change inside a deeply nested object, use Rxdeep&#x27;s state&#x27;s output observable for wrapping an object to subscribe to the change events.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;{ state } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;#39;rxdeep&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;([ { name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;#39;John&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;{ name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;#39;Jack&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;{ name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;#39;Jill&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;} ])&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6773;&quot;&gt;&#x2F;&#x2F; Listen to changes on &amp;#39;name&amp;#39; property of index 1 on the list:
&lt;&#x2F;span&gt;&lt;span&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;#39;name&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;subscribe&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#39bae6;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;     &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6773;&quot;&gt;&#x2F;&#x2F; --&amp;gt; logs `Jack`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Pandoc - Quick Tips #1</title>
        <published>2021-04-07T00:00:00+00:00</published>
        <updated>2021-04-07T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/pandoc-quick-tips-1/"/>
        <id>https://williamhuey.github.io/posts/pandoc-quick-tips-1/</id>
        
        <summary type="html">&lt;h3 id=&quot;render-full-html-site&quot;&gt;Render Full Html Site&lt;&#x2F;h3&gt;
&lt;p&gt;By default, converting a LaTeX file into an HTML file only produces a partial HTML page. Pandoc conversion strictly contains the content wrapped in the basic HTML equivalent tags, which is spartan as the following example would only output a paragraph tag without a html, head, nor body tag available.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;latex&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-latex &quot;&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;\documentclass&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#39bae6;&quot;&gt;article&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;\usepackage&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;margin&lt;&#x2F;span&gt;&lt;span&gt;=0.5in]{&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#39bae6;&quot;&gt;geometry&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;\title&lt;&#x2F;span&gt;&lt;span&gt;{Tex}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;\date&lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;\begin&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;document&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;\maketitle
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;some content
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;\end&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;document&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To fix this problem, the &quot;full html&quot; page requires the &quot;-s&quot; flag (standalone mode) to achieve the proper conversion.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;pandoc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt; -o &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;#39;my-output-file.html&amp;#39; &amp;#39;my-input-file.tex&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt; -s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Webpage Svg Screenshots</title>
        <published>2021-04-03T00:00:00+00:00</published>
        <updated>2021-04-03T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/svg-screenshots/"/>
        <id>https://williamhuey.github.io/posts/svg-screenshots/</id>
        
        <summary type="html">&lt;h3 id=&quot;accessible-screenshots-of-web-pages&quot;&gt;Accessible screenshots of web pages&lt;&#x2F;h3&gt;
&lt;p&gt;Taking a screenshot on a webpage illustrates and preserves the layout information with accompanying text, however, taking a screenshot where the content is primarily text implies a lost of useful information because you can no longer select the text nor zoom into the image without significant quality lost as is the case with most commonly used image formats such as png and jpeg.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>RxJS - Key Combination Detection</title>
        <published>2021-03-27T00:00:00+00:00</published>
        <updated>2021-03-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/rxjs-key-combination-detection/"/>
        <id>https://williamhuey.github.io/posts/rxjs-key-combination-detection/</id>
        
        <summary type="html">&lt;h3 id=&quot;hot-keys&quot;&gt;Hot Keys&lt;&#x2F;h3&gt;
&lt;p&gt;A hot key combination such as &quot;ctrl + shift + alt + a&quot; could be used to trigger a behavior in a web application such as the opening of a dialog or panel. It also provides a convenient shortcut when an action is often repeated in a workflow. There are certainly many libraries out there designated for such a &lt;a href=&quot;https:&#x2F;&#x2F;www.npmjs.com&#x2F;search?q=hotkey&quot;&gt;task&lt;&#x2F;a&gt;, but if you are already using RxJS, it is flexible enough that this functionality can be replicated without using an additional library.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Selenium - Python - Quick Tips #1</title>
        <published>2021-03-17T00:00:00+00:00</published>
        <updated>2021-03-17T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/selenium-python-quick-tips-1/"/>
        <id>https://williamhuey.github.io/posts/selenium-python-quick-tips-1/</id>
        
        <summary type="html">&lt;h3 id=&quot;webdriver-manager&quot;&gt;Webdriver Manager&lt;&#x2F;h3&gt;
&lt;p&gt;Use the latest version of the web driver for your browser of choice when testing by installing the &lt;a href=&quot;https:&#x2F;&#x2F;pypi.org&#x2F;project&#x2F;webdriver-manager&#x2F;&quot;&gt;webdriver_manager&lt;&#x2F;a&gt; package.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;pip&lt;&#x2F;span&gt;&lt;span&gt; install webdriver-manager
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The package will automatically download the newest version when tests are run with Selenium. This will relieve you of having to manually download the driver for inclusion in a folder while testing.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Angular - Module for Routes</title>
        <published>2021-03-10T00:00:00+00:00</published>
        <updated>2021-03-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/angular-module-route/"/>
        <id>https://williamhuey.github.io/posts/angular-module-route/</id>
        
        <summary type="html">&lt;h3 id=&quot;organize-routes-into-modules&quot;&gt;Organize Routes into Modules&lt;&#x2F;h3&gt;
&lt;p&gt;In Angular, to make routing cleaner, routes may be defined inside modules to localize the path definition to where a specific component is associated.&lt;&#x2F;p&gt;
&lt;p&gt;Here, we have the &quot;&#x2F;useful&#x2F;&quot; route and nested child route of &quot;&#x2F;useful&#x2F;stuff&quot; defined for our &quot;useful component&quot;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;font-style:italic;color:#5c6773;&quot;&gt;&#x2F;&#x2F;useful.module.ts
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;{ UsefulComponent } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;.&#x2F;useful.component&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;{ NgModule } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;@angular&#x2F;core&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;{ RouterModule } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;@angular&#x2F;router&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;routes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;  {
&lt;&#x2F;span&gt;&lt;span&gt;    path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    component&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;UsefulComponent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    children&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;[{ path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;stuff&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;component&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;UsefulComponent }]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;NgModule&lt;&#x2F;span&gt;&lt;span&gt;({
&lt;&#x2F;span&gt;&lt;span&gt;  imports&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;[RouterModule&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;forChild&lt;&#x2F;span&gt;&lt;span&gt;(routes)]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;export class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#59c2ff;&quot;&gt;UsefulModule &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>TypeScript - Descriptive String Arrays</title>
        <published>2021-03-01T00:00:00+00:00</published>
        <updated>2021-03-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/typescript-descriptive-string-arrays/"/>
        <id>https://williamhuey.github.io/posts/typescript-descriptive-string-arrays/</id>
        
        <summary type="html">&lt;h3 id=&quot;strings-from-a-union-type&quot;&gt;Strings from a Union Type&lt;&#x2F;h3&gt;
&lt;p&gt;Often times, an array would contain one of many possible string values, and it would be expressed as such&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;interface &lt;&#x2F;span&gt;&lt;span style=&quot;color:#59c2ff;&quot;&gt;BuildFlagsStatus &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  optionalArgsFlagKeys&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#59c2ff;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#39bae6;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;However, this is a not very helpful approach because usually the string values allowed placement inside the array comes from a select group of strings.&lt;&#x2F;p&gt;
&lt;p&gt;To be more descriptive, create a string union type and use that for typing an array.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Recording CLI Output</title>
        <published>2021-02-24T00:00:00+00:00</published>
        <updated>2021-02-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/record-cli-output/"/>
        <id>https://williamhuey.github.io/posts/record-cli-output/</id>
        
        <summary type="html">&lt;h3 id=&quot;take-a-frame-from-an-asciicast-recording&quot;&gt;Take a Frame from an Asciicast Recording&lt;&#x2F;h3&gt;
&lt;p&gt;Using &lt;a href=&quot;https:&#x2F;&#x2F;asciinema.org&#x2F;&quot;&gt;asciinema&lt;&#x2F;a&gt; is a convenient way to create an accessible recording of your terminal if you want to demo features of a CLI app because the output media permits you to select the text that actually runs in the asciinema player.&lt;&#x2F;p&gt;
&lt;p&gt;On occasions, you might be only interested in taking a screenshot of the recording when focusing one command. With the help of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;marionebl&#x2F;svg-term-cli&#x2F;&quot;&gt;&quot;svg-term-cli&quot;&lt;&#x2F;a&gt;, a select frame from asciicast recordings can be exported to a svg file.&lt;&#x2F;p&gt;
&lt;p&gt;It is also helpful to record a series of steps on the CLI at a time as to not disrupt your train of thought when you are going through each CLI command intended for something like an instructional tutorial.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-style:italic;color:#5c6773;&quot;&gt;# Record your cast
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;asciinema&lt;&#x2F;span&gt;&lt;span&gt; rec my-super-amazing.cast
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>RxJS - Dependent Observable for Multiple Matches</title>
        <published>2021-02-16T00:00:00+00:00</published>
        <updated>2021-02-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/rxjs-dependent-observables-multiple-matches/"/>
        <id>https://williamhuey.github.io/posts/rxjs-dependent-observables-multiple-matches/</id>
        
        <summary type="html">&lt;h3 id=&quot;give-precedence-to-greater-satisfied-criteria&quot;&gt;Give Precedence to Greater Satisfied Criteria&lt;&#x2F;h3&gt;
&lt;p&gt;Observables tend to be created from other observables through transformations by operators in a pipe. On some occasions, one observable is created from another, it creates a chain where you have the latter observable and initial observable both triggering when the initial base condition is met. However, there might be cases, where you would only want the latter observable to trigger because you want to find the observable which matches the most conditions.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Snowpack - &quot;Unbundler&quot;</title>
        <published>2021-02-07T00:00:00+00:00</published>
        <updated>2021-02-07T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/snowpack-unbundler/"/>
        <id>https://williamhuey.github.io/posts/snowpack-unbundler/</id>
        
        <summary type="html">&lt;h3 id=&quot;configure-a-snowpack-plugin&quot;&gt;Configure a Snowpack Plugin&lt;&#x2F;h3&gt;
&lt;p&gt;Snowpack is a frontend build tool that promotes itself as an alternative to Webpack because it uses new JS modules features, and the workflow is &quot;unbundled&quot; which skips the build steps during development to make for a faster workflow.&lt;&#x2F;p&gt;
&lt;p&gt;Snowpack has some &lt;a href=&quot;https:&#x2F;&#x2F;www.snowpack.dev&#x2F;reference&#x2F;supported-files&quot;&gt;sensible defaults&lt;&#x2F;a&gt; which permits the import of commonly used asset files such as scss, .css, .svg in your JavaScript files.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>RxJS - Logical Operators</title>
        <published>2021-01-30T00:00:00+00:00</published>
        <updated>2021-01-30T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/rxjs-logical-operators/"/>
        <id>https://williamhuey.github.io/posts/rxjs-logical-operators/</id>
        
        <summary type="html">&lt;h3 id=&quot;logical-evaluation&quot;&gt;Logical Evaluation&lt;&#x2F;h3&gt;
&lt;p&gt;In traditional JavaScript, one would use the logical operators &quot;&amp;amp;&amp;amp;&quot;, &quot;||&quot;, &quot;!&quot; when evaluating variables for the &quot;and&quot;, &quot;or&quot;, and &quot;not&quot; conditions respectively.
Similarly, there are RxJS operators which looks like the ones found in JavaScript when you wish to treat observable like values that needs to be compared against one another.&lt;&#x2F;p&gt;
&lt;p&gt;For the examples below, &quot;true&quot; in this sense refers to the observable have &quot;truly&quot; emitted a value and not have it base upon the actual underlying value within the observable.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;and&quot;&gt;AND&lt;&#x2F;h4&gt;
&lt;p&gt;Use the &quot;forkJoin&quot; operator when every single observable must be activated for the subscription to run.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;font-style:italic;color:#5c6773;&quot;&gt;&#x2F;&#x2F; When the observables will emit at least once in any order
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;{ forkJoin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;of&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;interval } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;#39;rxjs&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;{ take } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;#39;rxjs&#x2F;operators&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;timer$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;interval&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;pipe&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;take&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  truthfulness$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;of&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;forkJoin&lt;&#x2F;span&gt;&lt;span&gt;([
&lt;&#x2F;span&gt;&lt;span&gt;  timer$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  truthfulness$
&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;subscribe&lt;&#x2F;span&gt;&lt;span&gt;(() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#39bae6;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;#39;All completed once&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;})&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Alternatively, you might be able to use &quot;combineLatest&quot; when you
have long-lived observables. Tangentially, &quot;concat&quot; or &quot;zip&quot; will work if a strict order needs to be imposed for activation of observables in a series.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>RxJS - Quick Tips #1</title>
        <published>2021-01-24T00:00:00+00:00</published>
        <updated>2021-01-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/rxjs-quick-tips-1/"/>
        <id>https://williamhuey.github.io/posts/rxjs-quick-tips-1/</id>
        
        <summary type="html">&lt;h3 id=&quot;conditional-activation-of-an-observable&quot;&gt;Conditional Activation of an Observable&lt;&#x2F;h3&gt;
&lt;p&gt;Only make an observable run based on a ternary matching criteria.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;font-style:italic;color:#5c6773;&quot;&gt;&#x2F;&#x2F; Third party modules
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;{ NEVER&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;of } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;#39;rxjs&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;evaluateToTrueCriteria &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6773;&quot;&gt;&#x2F;&#x2F; &amp;#39;conditional$&amp;#39; will not run &amp;#39;subscribe&amp;#39; when the ternary
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6773;&quot;&gt;&#x2F;&#x2F; evaluates to the false branch
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;conditional$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;evaluateToTrueCriteria &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;of&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;NEVER&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;conditional$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;subscribe&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#39bae6;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;(res))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Pandoc Filter</title>
        <published>2021-01-17T00:00:00+00:00</published>
        <updated>2021-01-17T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/pandoc-filter/"/>
        <id>https://williamhuey.github.io/posts/pandoc-filter/</id>
        
        <summary type="html">&lt;h3 id=&quot;output-file-manipulation&quot;&gt;Output file Manipulation&lt;&#x2F;h3&gt;
&lt;p&gt;When working with a document format conversion, such as converting over a Markdown file to LaTeX,
there will be occasions where you might want to manipulate the output when Pandoc is not able to completely infer the output that is desired.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>NX - Angular Storybook and Cypress Testing</title>
        <published>2021-01-11T00:00:00+00:00</published>
        <updated>2021-01-11T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/nx-angular-storybook-and-cypress-testing/"/>
        <id>https://williamhuey.github.io/posts/nx-angular-storybook-and-cypress-testing/</id>
        
        <summary type="html">&lt;h3 id=&quot;scaffolding-for-angular-and-storybook-with-cypress&quot;&gt;Scaffolding for Angular and Storybook with Cypress&lt;&#x2F;h3&gt;
&lt;p&gt;First, use npx to localize the install of NX (v11.0.20) and Angular CLI (v11.0.20).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-style:italic;color:#5c6773;&quot;&gt;# Create a nx workspace
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;npx&lt;&#x2F;span&gt;&lt;span&gt; create-nx-workspace@latest
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Setting Up Zola</title>
        <published>2021-01-07T00:00:00+00:00</published>
        <updated>2021-01-07T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/zola-config/"/>
        <id>https://williamhuey.github.io/posts/zola-config/</id>
        
        <summary type="html">&lt;h3 id=&quot;static-site-generator-configuration&quot;&gt;Static Site Generator Configuration&lt;&#x2F;h3&gt;
&lt;p&gt;Zola is a decent static site generator written in Rust. This post will list some of my impressions and settings I made to get it customized to my liking to emulate the look and feel of my previous &lt;a href=&quot;https:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;20200212105912&#x2F;https:&#x2F;&#x2F;williamhuey.github.io&#x2F;&quot;&gt;blog&lt;&#x2F;a&gt; design.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;generating-a-new-project&quot;&gt;Generating a new project&lt;&#x2F;h4&gt;
&lt;p&gt;After using the init command, empty folders are generated, but it isn&#x27;t quite clear on what needs to be modified. Running the server on the newly generated project yields a welcome page, but the physical page is not to be found in any folder.
To get started quickly, I recommend that you use a &lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;themes&#x2F;&quot;&gt;theme&lt;&#x2F;a&gt; and then customize it to your needs.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>README.md Reuse</title>
        <published>2016-12-06T00:00:00+00:00</published>
        <updated>2016-12-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/readme-reuse/"/>
        <id>https://williamhuey.github.io/posts/readme-reuse/</id>
        
        <summary type="html">&lt;h3 id=&quot;common-help-information&quot;&gt;Common Help Information&lt;&#x2F;h3&gt;
&lt;p&gt;All NPM and Github repos have README.md as the primary means of communicating the purpose of a specific module or project. In some situations, such as a CLI module, there is almost always a command to list help for the module’s use.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Nodejs - Asynchronous File Operations with Try-Catch</title>
        <published>2016-11-27T00:00:00+00:00</published>
        <updated>2016-11-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/nodejs-asynchronous-file-operations-with-try-catch/"/>
        <id>https://williamhuey.github.io/posts/nodejs-asynchronous-file-operations-with-try-catch/</id>
        
        <summary type="html">&lt;h3 id=&quot;handle-situation-when-file-does-not-exist-in-directory&quot;&gt;Handle Situation When File Does Not Exist in Directory&lt;&#x2F;h3&gt;
&lt;p&gt;Performing a file reading operation to check whether a file exists before operating might cause a race condition as stated in the Nodejs section on fs.stat:&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Nodejs - Quick Tips #4</title>
        <published>2016-10-16T00:00:00+00:00</published>
        <updated>2016-10-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/nodejs-quick-tips-4/"/>
        <id>https://williamhuey.github.io/posts/nodejs-quick-tips-4/</id>
        
        <summary type="html">&lt;h3 id=&quot;identify-streams-better-when-logging-two-or-more-streams-at-a-time&quot;&gt;Identify Streams Better when Logging Two or More Streams at a Time&lt;&#x2F;h3&gt;
&lt;p&gt;Rxjs provides a means of performing a ‘side effect’ without modifying the observable through the observable chain. The ‘do’ command is good candidate for use when there is a need to log out information when specific operations are performed.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Nodejs - Quick Tips #3</title>
        <published>2016-07-03T00:00:00+00:00</published>
        <updated>2016-07-03T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/nodejs-quick-tips-3/"/>
        <id>https://williamhuey.github.io/posts/nodejs-quick-tips-3/</id>
        
        <summary type="html">&lt;h3 id=&quot;babel-requiring-es2015-file-from-es5&quot;&gt;Babel - Requiring ES2015 File from ES5&lt;&#x2F;h3&gt;
&lt;p&gt;In the situation where you desire to use a ES5 file to refer to a ES2015 file, the on-the-fly compilation option of Babel can be one of the ways to do so.&lt;&#x2F;p&gt;
&lt;p&gt;This case might come up when you are intending to run an init file that you do not want to perform any Babel compilation, but you still want the ES5 file to serve as the entry point for your module.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Nodejs - Quick Tips #2</title>
        <published>2016-04-17T00:00:00+00:00</published>
        <updated>2016-04-17T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/nodejs-quick-tips-2/"/>
        <id>https://williamhuey.github.io/posts/nodejs-quick-tips-2/</id>
        
        <summary type="html">&lt;h3 id=&quot;process-exit-and-time-elapse&quot;&gt;Process Exit and Time Elapse&lt;&#x2F;h3&gt;
&lt;p&gt;When performing a long-running operation in the terminal, such as file generation, a user would like to know how long the task has run.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Velocityjs - Effects</title>
        <published>2015-07-20T00:00:00+00:00</published>
        <updated>2015-07-20T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/velocityjs-effects/"/>
        <id>https://williamhuey.github.io/posts/velocityjs-effects/</id>
        
        <summary type="html">&lt;p&gt;For your heavy-duty JavaScript animations, I recommend &lt;a href=&quot;http:&#x2F;&#x2F;julian.com&#x2F;research&#x2F;velocity&#x2F;&quot;&gt;Velocityjs&lt;&#x2F;a&gt; since it has many features and great documentation. &lt;br&gt; Here are some simple effects that I find useful if you have chosen to use Velocityjs:&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Meteor - Quick Tips #4</title>
        <published>2015-05-16T00:00:00+00:00</published>
        <updated>2015-05-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/meteor-quick-tips-4/"/>
        <id>https://williamhuey.github.io/posts/meteor-quick-tips-4/</id>
        
        <summary type="html">&lt;h3 id=&quot;filtering-differences-between-minimongo-and-mongo&quot;&gt;Filtering Differences between Minimongo and Mongo&lt;&#x2F;h3&gt;
&lt;p&gt;Minimongo is Meteor&#x27;s client-side implementation of Mongodb, while Mongodb is referred to as Mongo.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Meteor - Quick Tips #3</title>
        <published>2015-03-25T00:00:00+00:00</published>
        <updated>2015-03-25T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/meteor-quick-tips-3/"/>
        <id>https://williamhuey.github.io/posts/meteor-quick-tips-3/</id>
        
        <summary type="html">&lt;h3 id=&quot;template-helpers-and-subscriptions&quot;&gt;Template Helpers and Subscriptions&lt;&#x2F;h3&gt;
&lt;p&gt;Templates helpers format data onto your templates, but one must ensure that subscription data is fully loaded before the template helpers have a chance to render.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Meteor - Quick Tips #2</title>
        <published>2015-02-14T00:00:00+00:00</published>
        <updated>2015-02-14T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/meteor-quick-tips-2/"/>
        <id>https://williamhuey.github.io/posts/meteor-quick-tips-2/</id>
        
        <summary type="html">&lt;h3 id=&quot;blaze-template-removal&quot;&gt;Blaze Template Removal&lt;&#x2F;h3&gt;
&lt;p&gt;Instead of using jQuery to perform DOM removal operations, Meteor&#x27;s Blaze remove can do the same thing with the following&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Meteor - Quick Tips #1</title>
        <published>2015-01-19T00:00:00+00:00</published>
        <updated>2015-01-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/meteor-quick-tips-1/"/>
        <id>https://williamhuey.github.io/posts/meteor-quick-tips-1/</id>
        
        <summary type="html">&lt;h3 id=&quot;redirecting-for-non-logged-in-users&quot;&gt;Redirecting for Non-Logged-In Users&lt;&#x2F;h3&gt;
&lt;p&gt;When an app has more than one URL and any other URL other than the &#x2F;home URL is restricted for logged-in users, than this requireLogin function will direct users back to the home URL when the user is not logged in. This is assuming that the IronRouter package is used.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Validating Numbers</title>
        <published>2014-12-24T00:00:00+00:00</published>
        <updated>2014-12-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/validating-numbers/"/>
        <id>https://williamhuey.github.io/posts/validating-numbers/</id>
        
        <summary type="html">&lt;h3 id=&quot;is-the-content-intended-to-be-a-number&quot;&gt;Is the content intended to be a number?&lt;&#x2F;h3&gt;
&lt;p&gt;When dealing with validations in input forms, one occasionally has to determine if the content entered is actually a number.
However, the input content will always be string when performing a check on an input.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>WordPress - Mixed Content Warning</title>
        <published>2014-11-26T00:00:00+00:00</published>
        <updated>2014-11-26T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/wordpress-mixed-content-warning/"/>
        <id>https://williamhuey.github.io/posts/wordpress-mixed-content-warning/</id>
        
        <summary type="html">&lt;h3 id=&quot;insecured-content&quot;&gt;Insecured Content&lt;&#x2F;h3&gt;
&lt;p&gt;Recently, when working with WordPress, I noticed that when using the &lt;a href=&quot;https:&#x2F;&#x2F;wordpress.org&#x2F;plugins&#x2F;master-slider&#x2F;&quot;&gt;Master Slider&lt;&#x2F;a&gt; plugin, a content slider&#x2F;carousel plugin, Firefox was complaining about mixed content from the images. I was using SSL on the site.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Bash - Clear History Upon Exiting Terminal</title>
        <published>2014-10-28T00:00:00+00:00</published>
        <updated>2014-10-28T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/bash-clear-history-upon-exiting-terminal/"/>
        <id>https://williamhuey.github.io/posts/bash-clear-history-upon-exiting-terminal/</id>
        
        <summary type="html">&lt;h3 id=&quot;cleaning-terminal-history&quot;&gt;Cleaning terminal history&lt;&#x2F;h3&gt;
&lt;p&gt;Whether you want to have some sense of privacy or a sense of cleanliness, working with the terminal leaves a history that you might want to remove.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>WordPress Quick Tips #1</title>
        <published>2014-09-25T00:00:00+00:00</published>
        <updated>2014-09-25T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/wordpress-quick-tips-1/"/>
        <id>https://williamhuey.github.io/posts/wordpress-quick-tips-1/</id>
        
        <summary type="html">&lt;h3 id=&quot;enqueue-multiple-google-fonts-into-one-stylesheet&quot;&gt;Enqueue Multiple Google Fonts into One Stylesheet&lt;&#x2F;h3&gt;
&lt;p&gt;Taking the twenty-fourteen theme for example, modify the &#x27;functions.php&#x27; by separate the different fonts that is to be used with a pipe character in the twentyfourteen_font_url function.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Simple Validator</title>
        <published>2014-08-26T00:00:00+00:00</published>
        <updated>2014-08-26T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/simple-validator/"/>
        <id>https://williamhuey.github.io/posts/simple-validator/</id>
        
        <summary type="html">&lt;h3 id=&quot;simply-validating&quot;&gt;Simply Validating&lt;&#x2F;h3&gt;
&lt;p&gt;Validation conjures up thoughts of input form validation, but validation could also pop up elsewhere when there is user input such as the case for parameters in jQuery plugins.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Namecheap SSL and Nginx</title>
        <published>2014-07-29T00:00:00+00:00</published>
        <updated>2014-07-29T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/namecheap-ssl-and-nginx/"/>
        <id>https://williamhuey.github.io/posts/namecheap-ssl-and-nginx/</id>
        
        <summary type="html">&lt;h3 id=&quot;namecheap-positivessl&quot;&gt;Namecheap PositiveSSL&lt;&#x2F;h3&gt;
&lt;p&gt;This post will explain the process of setting up your nginx-powered site to used Namecheap&#x27;s Comodo Positivessl certificate.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>File Stream&#x27;s Nth Line</title>
        <published>2014-07-10T00:00:00+00:00</published>
        <updated>2014-07-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/file-streams-nth-line/"/>
        <id>https://williamhuey.github.io/posts/file-streams-nth-line/</id>
        
        <summary type="html">&lt;h3 id=&quot;nth-line&quot;&gt;Nth Line&lt;&#x2F;h3&gt;
&lt;p&gt;In Nodejs, when reading a stream from a file, the process of getting the nth line requires reading (nth - 1) lines. A filestream&#x27;s data comes as it is ready and in order, but there is &lt;a href=&quot;http:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;6394951&#x2F;read-nth-line-of-file-in-nodejs&quot;&gt;no means of jumping&lt;&#x2F;a&gt; to a specific nth line of the stream.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Typeof Wrapper</title>
        <published>2014-06-20T00:00:00+00:00</published>
        <updated>2014-06-20T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/typeof-wrapper/"/>
        <id>https://williamhuey.github.io/posts/typeof-wrapper/</id>
        
        <summary type="html">&lt;h3 id=&quot;robust-typeof&quot;&gt;Robust Typeof&lt;&#x2F;h3&gt;
&lt;p&gt;Using typeof in JavaScript does not produce the results that one would expect as explain by many articles found on the &lt;a href=&quot;http:&#x2F;&#x2F;tobyho.com&#x2F;2011&#x2F;01&#x2F;28&#x2F;checking-types-in-javascript&#x2F;&quot;&gt;internet&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>jQuery Plugins - Prevent Multiple Instantiations</title>
        <published>2014-06-03T00:00:00+00:00</published>
        <updated>2014-06-03T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/jquery-plugins-prevent-multiple-instantiations/"/>
        <id>https://williamhuey.github.io/posts/jquery-plugins-prevent-multiple-instantiations/</id>
        
        <summary type="html">&lt;h2 id=&quot;script-loading-safety&quot;&gt;Script Loading Safety&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jquery-boilerplate&#x2F;jquery-boilerplate&quot;&gt;jQuery Boilerplate&lt;&#x2F;a&gt; is a popular boilerplate and provides a safety
net for double instantiation of a jQuery object with this code&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Nodejs Quick Tips #1</title>
        <published>2014-05-22T00:00:00+00:00</published>
        <updated>2014-05-22T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/nodejs-quick-tips-1/"/>
        <id>https://williamhuey.github.io/posts/nodejs-quick-tips-1/</id>
        
        <summary type="html">&lt;h3 id=&quot;creating-multiple-files&quot;&gt;Creating Multiple Files&lt;&#x2F;h3&gt;
&lt;p&gt;Unfortunately, the fs.writeFile does not accept an array for creating a bunch of files at once.
To solve this problem, put all files in an array and loop through
them to create the files.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Private Instance Method Variables</title>
        <published>2014-05-06T00:00:00+00:00</published>
        <updated>2014-05-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/private-instance-method-variables/"/>
        <id>https://williamhuey.github.io/posts/private-instance-method-variables/</id>
        
        <summary type="html">&lt;h3 id=&quot;instances-methods-and-their-personal-state&quot;&gt;Instances Methods and Their Personal State&lt;&#x2F;h3&gt;
&lt;p&gt;This post is for intended for JavaScript (not Java).&lt;&#x2F;p&gt;
&lt;p&gt;One may put instance method variables within an instance method to provide encapsulation, but what do you do when you want to maintain a private state for each instance method on each instance method execution?&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Pubsub Lists</title>
        <published>2014-05-01T00:00:00+00:00</published>
        <updated>2014-05-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/pubsub-lists/"/>
        <id>https://williamhuey.github.io/posts/pubsub-lists/</id>
        
        <summary type="html">&lt;h3 id=&quot;publish-and-subscribe&quot;&gt;Publish and Subscribe&lt;&#x2F;h3&gt;
&lt;p&gt;One way of emitting events is by using trigger on a jQuery element.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Readable-stream</title>
        <published>2014-04-22T00:00:00+00:00</published>
        <updated>2014-04-22T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/readable-stream/"/>
        <id>https://williamhuey.github.io/posts/readable-stream/</id>
        
        <summary type="html">&lt;h3 id=&quot;streaming-consistency&quot;&gt;Streaming Consistency&lt;&#x2F;h3&gt;
&lt;p&gt;Since Node&#x27;s streaming Api is still changing and is in &#x27;unstable&#x27; category, writing a npm module using streams may cause some unexpected behaviors on older versions of Node. To ensure that streams are compatible with older versions of Node, a drop-in replacement for stream is available called &#x27;readable-stream&#x27;.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Streaming Lines</title>
        <published>2014-04-15T00:00:00+00:00</published>
        <updated>2014-04-15T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/streaming-lines/"/>
        <id>https://williamhuey.github.io/posts/streaming-lines/</id>
        
        <summary type="html">&lt;h3 id=&quot;line-by-line&quot;&gt;Line by Line&lt;&#x2F;h3&gt;
&lt;p&gt;There are many streaming modules on npm to read lines from text files,
but many are inaccurate and slow. Inaccurate means that there is a failure to read many lines and
slow means that files with a lot of text per line will cause the modules to crawl.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Simple Server</title>
        <published>2014-03-12T00:00:00+00:00</published>
        <updated>2014-03-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/simple-server/"/>
        <id>https://williamhuey.github.io/posts/simple-server/</id>
        
        <summary type="html">&lt;h3 id=&quot;no-nodejs-required&quot;&gt;No nodejs required&lt;&#x2F;h3&gt;
&lt;p&gt;Many times there are code samples on Github that have simple static files that you would want to run on a server, such as the case if there are ajax calls in javascript files.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Sprites and Link Padding</title>
        <published>2014-02-13T00:00:00+00:00</published>
        <updated>2014-02-13T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/sprites-and-link-padding/"/>
        <id>https://williamhuey.github.io/posts/sprites-and-link-padding/</id>
        
        <summary type="html">&lt;p&gt;Sprites are often used to stylize &#x27;a&#x27; tags. When a sprite sheet is used, a fixed width and height is used to specific the image on the sprite.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Removing Stylesheet Rules</title>
        <published>2014-01-13T00:00:00+00:00</published>
        <updated>2014-01-13T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/removing-stylesheet-rules/"/>
        <id>https://williamhuey.github.io/posts/removing-stylesheet-rules/</id>
        
        <summary type="html">&lt;h3 id=&quot;off-with-the-rule&quot;&gt;Off with the Rule&lt;&#x2F;h3&gt;
&lt;p&gt;Most of the time, css rules are overridden to get a different style, but some rules need to be outright removed. For example, if a hover effect is in place when javascript is disabled, but the rule might interfere with the javascript code when javascript is enabled. This might happen when using a jQuery plugin for menu creation or text effect.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>jQuery Performance Tips #1</title>
        <published>2013-12-24T00:00:00+00:00</published>
        <updated>2013-12-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/jquery-performance-tips-number-1/"/>
        <id>https://williamhuey.github.io/posts/jquery-performance-tips-number-1/</id>
        
        <summary type="html">&lt;h3 id=&quot;checking-visibility&quot;&gt;Checking Visibility&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;font-style:italic;color:#5c6773;&quot;&gt;&#x2F;&#x2F; Visibility Test Cases
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;#word&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;:visible&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;#word:visible&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;length &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;#word:visible&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;length &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;#word&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;css&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;display&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;block&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;#word&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;:not(:hidden)&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;#word&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;:hidden&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>jQuery Event Handler Adapter</title>
        <published>2013-11-19T00:00:00+00:00</published>
        <updated>2013-11-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/jquery-event-handler-adapter/"/>
        <id>https://williamhuey.github.io/posts/jquery-event-handler-adapter/</id>
        
        <summary type="html">&lt;h3 id=&quot;bridging-the-gap&quot;&gt;Bridging the Gap&lt;&#x2F;h3&gt;
&lt;p&gt;Older versions of jQuery are still being used (&amp;lt;= 1.6), and those versions do not support the new &quot;on&quot; method of attaching event handlers to elements. If you were authoring jQuery plugins and want to ensure compatibility when working with events, then you would want to write an adapter inside your plugin.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Disable Stylesheets with JavaScript</title>
        <published>2013-11-04T00:00:00+00:00</published>
        <updated>2013-11-04T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/disable-stylesheets-with-javascript/"/>
        <id>https://williamhuey.github.io/posts/disable-stylesheets-with-javascript/</id>
        
        <summary type="html">&lt;h3 id=&quot;revile-those-styles&quot;&gt;Revile those Styles&lt;&#x2F;h3&gt;
&lt;p&gt;If the styles of stylesheets are atrocious, and you have no control over its loading, you may want to disable specific stylesheets with javascript.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Namespacing Event Handlers</title>
        <published>2013-10-19T00:00:00+00:00</published>
        <updated>2013-10-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/namespacing-event-handlers/"/>
        <id>https://williamhuey.github.io/posts/namespacing-event-handlers/</id>
        
        <summary type="html">&lt;h3 id=&quot;conflicting-events-handlers&quot;&gt;Conflicting Events Handlers&lt;&#x2F;h3&gt;
&lt;p&gt;Use event namespacing when attaching or detaching event listeners. This reduces the possibility of you accidentally removing event listeners that was not intended to be removed. This is especially important if you plan to use someone else&#x27;s JQuery plugin that interacts with an element which you are also manipulating through your own event handler attachment or detachment. There could also be the opposite problem where someone else&#x27;s JQuery plugin removes your attached listeners. This is why namespacing events is a good practice.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Optional Options</title>
        <published>2013-09-12T00:00:00+00:00</published>
        <updated>2013-09-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/optional-options/"/>
        <id>https://williamhuey.github.io/posts/optional-options/</id>
        
        <summary type="html">&lt;h3 id=&quot;common-object-format&quot;&gt;Common Object Format&lt;&#x2F;h3&gt;
&lt;p&gt;Most JQuery plugins will use the common format of customizing by providing a plain object to the plugin handler. This is well suited for plugins that provide a widget to your page where a callback might not be needed.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>JavaScript Quick Tips #4</title>
        <published>2013-08-16T00:00:00+00:00</published>
        <updated>2013-08-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/javascript-quick-tips-number-4/"/>
        <id>https://williamhuey.github.io/posts/javascript-quick-tips-number-4/</id>
        
        <summary type="html">&lt;h3 id=&quot;prototype-and-this&quot;&gt;Prototype and This&lt;&#x2F;h3&gt;
&lt;p&gt;When attaching a method onto a prototype, the methods can be called from another prototype method using &quot;this&quot;.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>JavaScript Quick Tips #3</title>
        <published>2013-06-19T00:00:00+00:00</published>
        <updated>2013-06-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/javascript-quick-tips-number-3/"/>
        <id>https://williamhuey.github.io/posts/javascript-quick-tips-number-3/</id>
        
        <summary type="html">&lt;h3 id=&quot;function-parameters-from-array-values&quot;&gt;Function Parameters from Array Values&lt;&#x2F;h3&gt;
&lt;p&gt;Suppose we have a function with parameters and an array:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;font-style:italic;color:#5c6773;&quot;&gt;&#x2F;&#x2F; A Function and an Array
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;doSomething&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;stuff&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;thing1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;thing2&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#39bae6;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;params were concatenated:&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot; &amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;stuff &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;thing1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;thing2)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;justAnArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;a&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;b&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;c&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>$.proxy</title>
        <published>2013-06-06T00:00:00+00:00</published>
        <updated>2013-06-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/dollars-dot-proxy/"/>
        <id>https://williamhuey.github.io/posts/dollars-dot-proxy/</id>
        
        <summary type="html">&lt;h3 id=&quot;getting-the-right-this&quot;&gt;Getting the Right &#x27;this&#x27;&lt;&#x2F;h3&gt;
&lt;p&gt;With jQuery, you often find yourself using an event listener with a callback function like so:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;font-style:italic;color:#5c6773;&quot;&gt;&#x2F;&#x2F; Common Event Handler
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;(document)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;ready&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb454;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;.my-element&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;click&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#39bae6;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;this is &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#39bae6;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  })&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;})&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Get Device Width</title>
        <published>2013-05-09T00:00:00+00:00</published>
        <updated>2013-05-09T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/get-device-width/"/>
        <id>https://williamhuey.github.io/posts/get-device-width/</id>
        
        <summary type="html">&lt;h3 id=&quot;detect-max-screen-width&quot;&gt;Detect Max Screen Width&lt;&#x2F;h3&gt;
&lt;p&gt;When a browser is zoomed in or resized, the reported maximum device screen width may not be what you expect. For example, you have a 1280px by 800px screen and fully maximized browser screen at 100% zoom level, but when you zoom into the page and use window.innerWidth to determine the max width, the value may not be 1280px.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Standalone Mocha with Component</title>
        <published>2013-05-02T00:00:00+00:00</published>
        <updated>2013-05-02T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/standalone-mocha-with-component/"/>
        <id>https://williamhuey.github.io/posts/standalone-mocha-with-component/</id>
        
        <summary type="html">&lt;h3 id=&quot;run-mocha-on-the-client-side&quot;&gt;Run Mocha on the Client Side&lt;&#x2F;h3&gt;
&lt;p&gt;Install Nvm to install Node by following instructions &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;creationix&#x2F;nvm&quot;&gt;here&lt;&#x2F;a&gt;. Nvm allows you to switch to different versions of Node to manage dependencies.
Install Component after Node is properly setup from &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;component&#x2F;component&quot;&gt;here&lt;&#x2F;a&gt;. Component is an asset management tool for the client side.
After Nvm, Node and Component are working properly, make a directory on the desktop and change to it.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>JavaScript Quick Tips #2</title>
        <published>2013-04-28T00:00:00+00:00</published>
        <updated>2013-04-28T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/javascript-quick-tips-number-2/"/>
        <id>https://williamhuey.github.io/posts/javascript-quick-tips-number-2/</id>
        
        <summary type="html">&lt;h3 id=&quot;concatenating-when-logging-without-the-plus-sign&quot;&gt;Concatenating when Logging without the Plus Sign&lt;&#x2F;h3&gt;
&lt;p&gt;You can use the comma in place of the plus sign when concatenation is needed.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#0f1419;color:#bfbab0;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;font-style:italic;color:#5c6773;&quot;&gt;&#x2F;&#x2F; Give the Comma a Try When Logging
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff7733;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;stuff &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;my stuff&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6773;&quot;&gt;&#x2F;&#x2F; the comma acts like the plus to concatenate your strings
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#39bae6;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29668;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c2d94c;&quot;&gt;&amp;quot;some text:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;stuff)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bfbab0cc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Checking Attribute Status with JQuery</title>
        <published>2013-04-24T00:00:00+00:00</published>
        <updated>2013-04-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/checking-attribute-status-with-jquery/"/>
        <id>https://williamhuey.github.io/posts/checking-attribute-status-with-jquery/</id>
        
        <summary type="html">&lt;h3 id=&quot;get-element-s-attribute-value-or-status&quot;&gt;Get Element&#x27;s Attribute Value or Status&lt;&#x2F;h3&gt;
&lt;p&gt;With JQuery, you can do this $(&#x27;#your-element&#x27;).hasClass(&#x27;a-class&#x27;) to check if the element has a certain class. The problem is that you have to know the class name ahead of time when you use .hasClass. I wanted a general way to know if the class attribute actually exists on the element, so I created the getAttrStat function for JQuery to see if the attribute in question on the element is undefined, empty, or has a value without knowing the attribute value ahead of time.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Nested Divs Spaced Evenly</title>
        <published>2013-04-18T00:00:00+00:00</published>
        <updated>2013-04-18T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/nested-divs-spaced-evenly/"/>
        <id>https://williamhuey.github.io/posts/nested-divs-spaced-evenly/</id>
        
        <summary type="html">&lt;h3 id=&quot;get-child-divs-to-align-vertically-with-spacing&quot;&gt;Get Child Divs to Align Vertically with Spacing&lt;&#x2F;h3&gt;
&lt;p&gt;You may find yourself having to align fixed-height divs that are nested within a parent div. For example, you might have images that need equal spacing at the top and the bottom. In order to do this, set a margin-bottom on all the child divs (B, C, D) within the parent div (A).&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>JavaScript Quick Tips #1</title>
        <published>2013-04-14T00:00:00+00:00</published>
        <updated>2013-04-14T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/javascript-quick-tips-number-1/"/>
        <id>https://williamhuey.github.io/posts/javascript-quick-tips-number-1/</id>
        
        <summary type="html">&lt;h3 id=&quot;solutions-to-common-javascript-problems&quot;&gt;Solutions to Common JavaScript Problems&lt;&#x2F;h3&gt;
&lt;h3 id=&quot;problem&quot;&gt;Problem&lt;&#x2F;h3&gt;
&lt;p&gt;Alerting an object returns [object Object].&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Ember Routes Redirect</title>
        <published>2013-04-13T00:00:00+00:00</published>
        <updated>2013-04-13T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/ember-routes-redirect/"/>
        <id>https://williamhuey.github.io/posts/ember-routes-redirect/</id>
        
        <summary type="html">&lt;h3 id=&quot;from-index-to-another-route&quot;&gt;From Index to Another Route&lt;&#x2F;h3&gt;
&lt;p&gt;You want your root index route to redirect to another route such as when you are on the index URL (root_url) and you need to get to root_url&#x2F;#&#x2F;another_route. This may be useful because you wish to use the model information from another_route on initial page load. A downloadable demo is located below.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Basic Gemset Management</title>
        <published>2013-04-11T00:00:00+00:00</published>
        <updated>2013-04-11T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/basic-gemset-management/"/>
        <id>https://williamhuey.github.io/posts/basic-gemset-management/</id>
        
        <summary type="html">&lt;h3 id=&quot;crud-for-your-rvm-gemset&quot;&gt;CRUD for your rvm gemset&lt;&#x2F;h3&gt;
&lt;p&gt;Rvm stands for ruby version manager. It is used to manage ruby environments with something called gemsets. More info can be found &lt;a href=&quot;https:&#x2F;&#x2F;rvm.io&#x2F;&quot;&gt;here&lt;&#x2F;a&gt;. Rvm comes in handy when you&#x27;re working with &lt;a href=&quot;http:&#x2F;&#x2F;www.rubyonrails.org&#x2F;&quot;&gt;Rails&lt;&#x2F;a&gt; because you can isolate ruby environments. Here are some snippets for common tasks when dealing with gemsets.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Whole Header Region Clickable</title>
        <published>2013-04-03T00:00:00+00:00</published>
        <updated>2013-04-03T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/whole-header-region-clickable/"/>
        <id>https://williamhuey.github.io/posts/whole-header-region-clickable/</id>
        
        <summary type="html">&lt;h3 id=&quot;header-text-and-image-are-clickable&quot;&gt;Header Text and Image are Clickable&lt;&#x2F;h3&gt;
&lt;p&gt;On the majority the sites out there, the click of the upper-left hand side where logo and text is situated, will take you to the home page. Take for example &lt;a href=&quot;https:&#x2F;&#x2F;trello.com&#x2F;&quot;&gt;Trello&lt;&#x2F;a&gt; or &lt;a href=&quot;http:&#x2F;&#x2F;www.pcworld.com&#x2F;&quot;&gt;PcWorld&lt;&#x2F;a&gt;. However, I do not have a small logo on the upper-left of the site because I want my whole header region to lead to the home page.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>First Official Post</title>
        <published>2013-03-24T00:00:00+00:00</published>
        <updated>2013-03-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://williamhuey.github.io/posts/first-official-post/"/>
        <id>https://williamhuey.github.io/posts/first-official-post/</id>
        
        <summary type="html">&lt;h2 id=&quot;customizing-octopress-default-theme&quot;&gt;Customizing Octopress Default Theme&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;change-default-theme-css&quot;&gt;Change Default Theme CSS&lt;&#x2F;h3&gt;
&lt;p&gt;In your sass&#x2F;custom&#x2F;_colors.scss file, define the values for the items below. I&#x27;m using the following colors for my theme, but feel free to change them to whatever you want them to be.&lt;&#x2F;p&gt;</summary>
        
    </entry>
</feed>
